{"version":3,"sources":["../static/js/1.83b4061a.chunk.js","layout/AttributeTable.js","../node_modules/@turf/helpers/index.js","components/AttributeTableContent/AttributeTableToolbar.js","components/AttributeTableContent/AttributeTableTable.js","components/AttributeTableContent/EnhancedTableHead.js","components/AttributeTableContent/SecondaryTableToolbar.js","components/AttributeTableContent/FilterChipContainer.js","components/AttributeTableContent/FilterChip.js","utils/geoprocessing/areaOfPolygons.js","../node_modules/@turf/area/index.js","../node_modules/@turf/area/node_modules/@turf/meta/index.js"],"names":["webpackJsonp","5695","module","__webpack_exports__","__webpack_require__","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","defineProperty","__WEBPACK_IMPORTED_MODULE_0_react__","__WEBPACK_IMPORTED_MODULE_0_react___default","n","__WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__","__WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles___default","__WEBPACK_IMPORTED_MODULE_2__material_ui_core__","__WEBPACK_IMPORTED_MODULE_3__components_AttributeTableContent_AttributeTableToolbar__","__WEBPACK_IMPORTED_MODULE_4__components_AttributeTableContent_AttributeTableTable__","__WEBPACK_IMPORTED_MODULE_5__components_AttributeTableContent_FilterChipContainer__","__WEBPACK_IMPORTED_MODULE_6__utils_geoprocessing_areaOfPolygons__","_typeof","Symbol","iterator","obj","_createClass","defineProperties","target","props","descriptor","key","protoProps","staticProps","styles","theme","drawer","width","maxHeight","flexShrink","drawerPaper","zIndex","tableRoot","display","justifyContent","flexWrap","tableContent","backgroundColor","palette","action","hover","minWidth","height","margin","spacing","unit","AttributeTable","_Component","this","_this","getPrototypeOf","_initialiseProps","layers","layerId","layer","find","l","id","data","getRowHeadersAndData","state","rowHeaders","selected","filterSentences","showFilter","prevProps","_props","setState","_props2","classes","open","closeAttribTable","_state","a","createElement","className","variant","anchor","paper","addNewFilter","bind","deleteFilterSentence","removeAllFilters","handleSelectAllClick","handleDeleteSelected","handleNewLayerFromSelected","handleClick","displayFilter","addAreaColumn","_this2","rowHeaderSet","Set","rowHeaderType","features","forEach","feature","index","dataObj","assign","properties","push","keys","add","concat","map","header","label","numeric","filterSelection","dataElem","selectElem","filterElem","query","isNumeric","attrib","operator","val","toString","eval","filter","splice","event","checked","_props3","receiveNewData","includes","_props4","receiveNewJson","JSON","parse","stringify","type","displayName","selectedIndex","indexOf","newSelected","slice","_props5","withTheme","5740","exports","geom","options","feat","bbox","geometry","coordinates","point","lineString","polygon","multiPoint","multiLineString","multiPolygon","Error","points","featureCollection","coords","_i","coordinates_1","ring","j","polygons","lineStrings","fc","geometryCollection","geometries","round","num","precision","multiplier","Math","pow","radiansToLength","radians","units","factor","factors","lengthToRadians","distance","lengthToDegrees","radiansToDegrees","bearingToAzimuth","bearing","angle","PI","degreesToRadians","degrees","convertLength","originalUnit","finalUnit","convertArea","area","startFactor","areaFactors","finalFactor","isNumber","isNaN","test","isObject","input","validateBBox","validateId","radians2degrees","degrees2radians","distanceToDegrees","distanceToRadians","radiansToDistance","bearingToAngle","convertDistance","earthRadius","centimeters","centimetres","feet","inches","kilometers","kilometres","meters","metres","miles","millimeters","millimetres","nauticalmiles","yards","unitsFactors","acres","6355","__WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Close__","__WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Close___default","content","paddingLeft","paddingRight","AttributeTableToolbar","apply","arguments","disableGutters","noWrap","style","flex","title","onClick","6356","desc","b","orderBy","stableSort","array","cmp","stabilizedThis","el","sort","order","getSorting","__WEBPACK_IMPORTED_MODULE_3__EnhancedTableHead__","__WEBPACK_IMPORTED_MODULE_4__SecondaryTableToolbar__","AttributeTableTable","handleChangePage","page","handleChangeRowsPerPage","rowsPerPage","handleRequestSort","property","isSelected","getCells","row","emptyRows","min","numSelected","table","aria-labelledby","onSelectAllClick","onRequestSort","rowCount","role","aria-checked","tabIndex","padding","colSpan","component","count","backIconButtonProps","aria-label","nextIconButtonProps","onChangePage","onChangeRowsPerPage","6357","head","primary","dark","EnhancedTableHead","_ref","_temp","_ret","_len","args","_key","createSortHandler","indeterminate","onChange","disablePadding","sortDirection","placement","enterDelay","active","direction","6358","_defineProperty","__WEBPACK_IMPORTED_MODULE_1_classnames__","__WEBPACK_IMPORTED_MODULE_1_classnames___default","__WEBPACK_IMPORTED_MODULE_2__material_ui_core_styles__","__WEBPACK_IMPORTED_MODULE_3__material_ui_core__","__WEBPACK_IMPORTED_MODULE_4__material_ui_icons_Delete__","__WEBPACK_IMPORTED_MODULE_4__material_ui_icons_Delete___default","__WEBPACK_IMPORTED_MODULE_5__material_ui_icons_InsertDriveFile__","__WEBPACK_IMPORTED_MODULE_5__material_ui_icons_InsertDriveFile___default","__WEBPACK_IMPORTED_MODULE_6__material_ui_icons_FilterList__","__WEBPACK_IMPORTED_MODULE_6__material_ui_icons_FilterList___default","__WEBPACK_IMPORTED_MODULE_7__material_ui_icons_Straighten__","__WEBPACK_IMPORTED_MODULE_7__material_ui_icons_Straighten___default","__WEBPACK_IMPORTED_MODULE_8__material_ui_core_styles_colorManipulator__","root","highlight","color","secondary","main","light","text","spacer","actions","actionDiv","SecondaryTableToolbar","6359","__WEBPACK_IMPORTED_MODULE_4__FilterChip__","chip","button","FilterChipContainer","submitFilter","s","sentence","deleteSentence","6360","__WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Delete__","__WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Delete___default","__WEBPACK_IMPORTED_MODULE_4__material_ui_icons_Done__","__WEBPACK_IMPORTED_MODULE_4__material_ui_icons_Done___default","numericOperators","stringOperators","mainDiv","borderRadius","listStyle","select","marginRight","marginTop","marginBottom","FilterChip","handleChange","name","rh","Number","TextFieldError","_this$state","keyupHandler","document","addEventListener","removeEventListener","e","keyCode","operatorList","errorText","hasError","placeholder","disabled","error","helperText","6361","__WEBPACK_IMPORTED_MODULE_0__turf_area__","__WEBPACK_IMPORTED_MODULE_0__turf_area___default","areaOfPolygons","geojson","f","6362","meta_1","geomReduce","calculateArea","total","polygonArea","abs","ringArea","p1","p2","p3","lowerIndex","middleIndex","upperIndex","coordsLength","rad","sin","RADIUS","default","6363","coordEach","callback","excludeWrapCoord","k","stopG","geometryMaybeCollection","isGeometryCollection","wrapShrink","coordIndex","isFeatureCollection","isFeature","stop","featureIndex","geomIndex","multiFeatureIndex","geometryIndex","geomType","coordReduce","initialValue","previousValue","currentCoord","undefined","propEach","propReduce","currentProperties","featureEach","featureReduce","currentFeature","coordAll","coord","geomEach","g","featureProperties","featureBBox","featureId","currentGeometry","flattenEach","helpers","coordinate","flattenReduce","segmentEach","segmentIndex","previousCoords","previousFeatureIndex","previousMultiIndex","prevGeomIndex","featureIndexCoord","multiPartIndexCoord","currentSegment","segmentReduce","started","lineEach","lineReduce","currentLine","findSegment","findPoint"],"mappings":"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","file":"static/js/1.83b4061a.chunk.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 5695:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__material_ui_core__ = __webpack_require__(143);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__components_AttributeTableContent_AttributeTableToolbar__ = __webpack_require__(6355);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__components_AttributeTableContent_AttributeTableTable__ = __webpack_require__(6356);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__components_AttributeTableContent_FilterChipContainer__ = __webpack_require__(6359);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__utils_geoprocessing_areaOfPolygons__ = __webpack_require__(6361);\nvar _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i<arr.length;i++){arr2[i]=arr[i];}return arr2;}else{return Array.from(arr);}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**\r\n * Shows up at bottom of page if Attribute table is opened.\r\n */var styles=function styles(theme){return{drawer:{width:'100%',maxHeight:'70%',flexShrink:0},drawerPaper:{width:'100%',zIndex:20000},tableRoot:{display:'flex',justifyContent:'center',flexWrap:'wrap'},tableContent:{backgroundColor:theme.palette.action.hover,minWidth:500,height:'100%',margin:theme.spacing.unit}};};var AttributeTable=function(_Component){_inherits(AttributeTable,_Component);function AttributeTable(props){_classCallCheck(this,AttributeTable);var _this=_possibleConstructorReturn(this,(AttributeTable.__proto__||Object.getPrototypeOf(AttributeTable)).call(this,props));_initialiseProps.call(_this);var layers=props.layers,layerId=props.layerId;var layer=layers.find(function(l){return l.id===layerId;});var data=layer?_this.getRowHeadersAndData(layer):'';_this.state={data:data?data.data:'',rowHeaders:data?data.rowHeaders:'',selected:[],filterSentences:[],showFilter:false};return _this;}_createClass(AttributeTable,[{key:'componentDidUpdate',value:function componentDidUpdate(prevProps){if(prevProps.layerId!==this.props.layerId){var _props=this.props,layers=_props.layers,layerId=_props.layerId;var layer=layers.find(function(l){return l.id===layerId;});var data=layer?this.getRowHeadersAndData(layer):'';this.setState({data:data?data.data:'',rowHeaders:data?data.rowHeaders:'',layer:layer});}}},{key:'render',value:function render(){var _props2=this.props,classes=_props2.classes,open=_props2.open,closeAttribTable=_props2.closeAttribTable,layerId=_props2.layerId,layers=_props2.layers;var _state=this.state,data=_state.data,selected=_state.selected,rowHeaders=_state.rowHeaders,filterSentences=_state.filterSentences,showFilter=_state.showFilter;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"j\" /* Drawer */],{className:classes.drawer,variant:'persistent',anchor:'bottom',open:open,classes:{paper:classes.drawerPaper}},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__components_AttributeTableContent_AttributeTableToolbar__[\"a\" /* default */],{closeAttribTable:closeAttribTable}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"i\" /* Divider */],null),layerId?__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:classes.tableRoot},showFilter?__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:classes.tableContent},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5__components_AttributeTableContent_FilterChipContainer__[\"a\" /* default */],{addNewFilter:this.addNewFilter.bind(this),filterSentences:filterSentences,deleteFilterSentence:this.deleteFilterSentence.bind(this),removeAllFilters:this.removeAllFilters.bind(this),rowHeaders:rowHeaders})):null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:classes.tableContent},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__components_AttributeTableContent_AttributeTableTable__[\"a\" /* default */],{layerId:layerId,layers:layers,data:data,rowHeaders:rowHeaders,selected:selected,handleSelectAllClick:this.handleSelectAllClick.bind(this),handleDeleteSelected:this.handleDeleteSelected.bind(this),handleNewLayerFromSelected:this.handleNewLayerFromSelected.bind(this),handleClick:this.handleClick.bind(this),displayFilter:this.displayFilter.bind(this),addAreaColumn:this.addAreaColumn.bind(this)}))):null));}}]);return AttributeTable;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);var _initialiseProps=function _initialiseProps(){var _this2=this;this.getRowHeadersAndData=function(layer){var data=[];var rowHeaderSet=new Set([]);var rowHeaderType={};layer.data.features.forEach(function(feature,index){feature.id=feature.id?feature.id:index;var dataObj={};Object.assign(dataObj,feature.properties);dataObj['id']=feature.id;data.push(dataObj);Object.keys(feature.properties).forEach(function(key){rowHeaderSet.add(key);rowHeaderType[key]=_typeof(feature.properties[key]);});});var rowHeaders=[].concat(_toConsumableArray(rowHeaderSet)).map(function(header){return{label:header,numeric:rowHeaderType[header]==='number'};});return{data:data,rowHeaders:rowHeaders};};this.displayFilter=function(){_this2.setState({showFilter:true});};this.filterSelection=function(filterSentences){var data=_this2.state.data;var selected=[];if(filterSentences.length>0){data.forEach(function(dataElem,index){var selectElem=true;filterSentences.forEach(function(filterElem){//Must match all criteria\nvar query=filterElem.isNumeric?dataElem[filterElem.attrib]+filterElem.operator+filterElem.val:'\"'+dataElem[filterElem.attrib]+'\"'+'.'+filterElem.operator+'(\"'+filterElem.val.toString()+'\")';if(filterElem.operator==='equals'){query='\"'+dataElem[filterElem.attrib]+'\"'+'==='+'\"'+filterElem.val.toString()+'\"';}if(!eval(query)){selectElem=false;}});if(selectElem){selected.push(dataElem.id);}});}_this2.setState({selected:selected});};this.addNewFilter=function(filter){var filterSentences=_this2.state.filterSentences;filterSentences.push(filter);_this2.filterSelection(filterSentences);_this2.setState({filterSentences:filterSentences});};this.removeAllFilters=function(){_this2.setState({filterSentences:[],showFilter:false});};this.deleteFilterSentence=function(i){var filterSentences=_this2.state.filterSentences;filterSentences.splice(i,1);_this2.filterSelection(filterSentences);_this2.setState(filterSentences);};this.handleSelectAllClick=function(event){if(event.target.checked){_this2.setState(function(state){return{selected:state.data.map(function(n){return n.id;})};});return;}_this2.setState({selected:[]});};this.handleDeleteSelected=function(){var _props3=_this2.props,receiveNewData=_props3.receiveNewData,layerId=_props3.layerId,layers=_props3.layers;var selected=_this2.state.selected;var layer=layers.find(function(l){return l.id===layerId;});layer.data.features=layer.data.features.filter(function(feature){return!selected.includes(feature.id);});var data=layer?_this2.getRowHeadersAndData(layer):'';_this2.setState({data:data?data.data:'',rowHeaders:data?data.rowHeaders:'',layer:layer,selected:[]});receiveNewData(layerId);};this.handleNewLayerFromSelected=function(){var _props4=_this2.props,receiveNewJson=_props4.receiveNewJson,layerId=_props4.layerId,layers=_props4.layers,closeAttribTable=_props4.closeAttribTable;var selected=_this2.state.selected;var layer=layers.find(function(l){return l.id===layerId;});var features=JSON.parse(JSON.stringify(layer.data.features));// Create a deep clone copy\nfeatures=features.filter(function(feature){return selected.includes(feature.id);});var json={\"type\":\"FeatureCollection\",\"features\":features};receiveNewJson(json,layer.displayName+'_filtered');closeAttribTable();};this.handleClick=function(event,id){var selected=_this2.state.selected;var selectedIndex=selected.indexOf(id);var newSelected=[];if(selectedIndex===-1){newSelected=newSelected.concat(selected,id);}else if(selectedIndex===0){newSelected=newSelected.concat(selected.slice(1));}else if(selectedIndex===selected.length-1){newSelected=newSelected.concat(selected.slice(0,-1));}else if(selectedIndex>0){newSelected=newSelected.concat(selected.slice(0,selectedIndex),selected.slice(selectedIndex+1));}_this2.setState({selected:newSelected});};this.addAreaColumn=function(){var _props5=_this2.props,layers=_props5.layers,layerId=_props5.layerId;var layer=layers.find(function(l){return l.id===layerId;});layer.data=Object(__WEBPACK_IMPORTED_MODULE_6__utils_geoprocessing_areaOfPolygons__[\"a\" /* default */])(layer.data);var data=layer?_this2.getRowHeadersAndData(layer):'';_this2.setState({data:data?data.data:'',rowHeaders:data?data.rowHeaders:''});};};/* harmony default export */ __webpack_exports__[\"default\"] = (Object(__WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__[\"withStyles\"])(styles,{withTheme:true})(AttributeTable));\n\n/***/ }),\n\n/***/ 5740:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.370,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius / 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.370,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1 / 1.0936,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, options) {\n    if (options === void 0) { options = {}; }\n    switch (type) {\n        case \"Point\": return point(coordinates).geometry;\n        case \"LineString\": return lineString(coordinates).geometry;\n        case \"Polygon\": return polygon(coordinates).geometry;\n        case \"MultiPoint\": return multiPoint(coordinates).geometry;\n        case \"MultiLineString\": return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\": return multiPolygon(coordinates).geometry;\n        default: throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num) && !/^\\s*$/.test(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return (!!input) && (input.constructor === Object);\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n// Deprecated methods\nfunction radians2degrees() {\n    throw new Error(\"method has been renamed to `radiansToDegrees`\");\n}\nexports.radians2degrees = radians2degrees;\nfunction degrees2radians() {\n    throw new Error(\"method has been renamed to `degreesToRadians`\");\n}\nexports.degrees2radians = degrees2radians;\nfunction distanceToDegrees() {\n    throw new Error(\"method has been renamed to `lengthToDegrees`\");\n}\nexports.distanceToDegrees = distanceToDegrees;\nfunction distanceToRadians() {\n    throw new Error(\"method has been renamed to `lengthToRadians`\");\n}\nexports.distanceToRadians = distanceToRadians;\nfunction radiansToDistance() {\n    throw new Error(\"method has been renamed to `radiansToLength`\");\n}\nexports.radiansToDistance = radiansToDistance;\nfunction bearingToAngle() {\n    throw new Error(\"method has been renamed to `bearingToAzimuth`\");\n}\nexports.bearingToAngle = bearingToAngle;\nfunction convertDistance() {\n    throw new Error(\"method has been renamed to `convertLength`\");\n}\nexports.convertDistance = convertDistance;\n\n\n/***/ }),\n\n/***/ 6355:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__material_ui_core__ = __webpack_require__(143);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Close__ = __webpack_require__(149);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Close___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Close__);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var styles=function styles(theme){return{content:{paddingLeft:theme.spacing.unit*3,paddingRight:theme.spacing.unit*3}};};var AttributeTableToolbar=function(_Component){_inherits(AttributeTableToolbar,_Component);function AttributeTableToolbar(){_classCallCheck(this,AttributeTableToolbar);return _possibleConstructorReturn(this,(AttributeTableToolbar.__proto__||Object.getPrototypeOf(AttributeTableToolbar)).apply(this,arguments));}_createClass(AttributeTableToolbar,[{key:'render',value:function render(){var _props=this.props,classes=_props.classes,closeAttribTable=_props.closeAttribTable;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"K\" /* Toolbar */],{className:classes.content,disableGutters:true},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"M\" /* Typography */],{variant:'h5',noWrap:true},'Attribute Table'),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{style:{flex:1}}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"L\" /* Tooltip */],{title:'Close Atribute Table'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"l\" /* IconButton */],{onClick:closeAttribTable},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Close___default.a,null)))));}}]);return AttributeTableToolbar;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);/* harmony default export */ __webpack_exports__[\"a\"] = (Object(__WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__[\"withStyles\"])(styles,{withTheme:true})(AttributeTableToolbar));\n\n/***/ }),\n\n/***/ 6356:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__material_ui_core__ = __webpack_require__(143);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__EnhancedTableHead__ = __webpack_require__(6357);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__SecondaryTableToolbar__ = __webpack_require__(6358);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var styles=function styles(theme){return{};};function desc(a,b,orderBy){if(b[orderBy]<a[orderBy]){return-1;}if(b[orderBy]>a[orderBy]){return 1;}return 0;}function stableSort(array,cmp){var stabilizedThis=array.map(function(el,index){return[el,index];});stabilizedThis.sort(function(a,b){var order=cmp(a[0],b[0]);if(order!==0)return order;return a[1]-b[1];});return stabilizedThis.map(function(el){return el[0];});}function getSorting(order,orderBy){return order==='desc'?function(a,b){return desc(a,b,orderBy);}:function(a,b){return-desc(a,b,orderBy);};}var AttributeTableTable=function(_Component){_inherits(AttributeTableTable,_Component);function AttributeTableTable(props){_classCallCheck(this,AttributeTableTable);var _this=_possibleConstructorReturn(this,(AttributeTableTable.__proto__||Object.getPrototypeOf(AttributeTableTable)).call(this,props));_this.handleChangePage=function(event,page){_this.setState({page:page});};_this.handleChangeRowsPerPage=function(event){_this.setState({rowsPerPage:event.target.value});};_this.handleRequestSort=function(event,property){var orderBy=property;var order='desc';if(_this.state.orderBy===property&&_this.state.order==='desc'){order='asc';}_this.setState({order:order,orderBy:orderBy});};_this.isSelected=function(id){return _this.props.selected.indexOf(id)!==-1;};_this.getCells=function(row){return _this.props.rowHeaders.map(function(header,index){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"D\" /* TableCell */],{key:index,numeric:header.numeric},row[header.label]);});};var layers=props.layers,layerId=props.layerId;var layer=layers.find(function(l){return l.id===layerId;});_this.state={order:'asc',orderBy:'id',page:0,rowsPerPage:5,layer:layer};return _this;}_createClass(AttributeTableTable,[{key:'render',value:function render(){var _this2=this;var _props=this.props,classes=_props.classes,data=_props.data,selected=_props.selected,rowHeaders=_props.rowHeaders,handleSelectAllClick=_props.handleSelectAllClick,addAreaColumn=_props.addAreaColumn,handleClick=_props.handleClick,displayFilter=_props.displayFilter,handleNewLayerFromSelected=_props.handleNewLayerFromSelected,handleDeleteSelected=_props.handleDeleteSelected;var _state=this.state,order=_state.order,orderBy=_state.orderBy,rowsPerPage=_state.rowsPerPage,page=_state.page,layer=_state.layer;var emptyRows=rowsPerPage-Math.min(rowsPerPage,data.length-page*rowsPerPage);return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__SecondaryTableToolbar__[\"a\" /* default */],{addAreaColumn:addAreaColumn,handleNewLayerFromSelected:handleNewLayerFromSelected,handleDeleteSelected:handleDeleteSelected,displayFilter:displayFilter,numSelected:selected.length,layer:layer}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"B\" /* Table */],{className:classes.table,'aria-labelledby':'tableTitle'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__EnhancedTableHead__[\"a\" /* default */],{numSelected:selected.length,order:order,orderBy:orderBy,onSelectAllClick:handleSelectAllClick,onRequestSort:this.handleRequestSort,rowCount:data.length,rowHeaders:rowHeaders}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"C\" /* TableBody */],null,stableSort(data,getSorting(order,orderBy)).slice(page*rowsPerPage,page*rowsPerPage+rowsPerPage).map(function(n){var isSelected=_this2.isSelected(n.id);return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"G\" /* TableRow */],{hover:true,onClick:function onClick(event){return handleClick(event,n.id);},role:'checkbox','aria-checked':isSelected,tabIndex:-1,key:n.id,selected:isSelected},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"D\" /* TableCell */],{padding:'checkbox'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"c\" /* Checkbox */],{checked:isSelected})),_this2.getCells(n));}),emptyRows>0&&__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"G\" /* TableRow */],{style:{height:49*emptyRows}},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"D\" /* TableCell */],{colSpan:6})))),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"F\" /* TablePagination */],{component:'div',count:data.length,rowsPerPage:rowsPerPage,page:page,backIconButtonProps:{'aria-label':'Previous Page'},nextIconButtonProps:{'aria-label':'Next Page'},onChangePage:this.handleChangePage,onChangeRowsPerPage:this.handleChangeRowsPerPage}));}}]);return AttributeTableTable;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);/* harmony default export */ __webpack_exports__[\"a\"] = (Object(__WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__[\"withStyles\"])(styles,{withTheme:true})(AttributeTableTable));\n\n/***/ }),\n\n/***/ 6357:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__material_ui_core__ = __webpack_require__(143);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var styles=function styles(theme){return{head:{backgroundColor:theme.palette.primary.dark}};};/**\r\n * The top row of the Attribute Table\r\n */var EnhancedTableHead=function(_Component){_inherits(EnhancedTableHead,_Component);function EnhancedTableHead(){var _ref;var _temp,_this,_ret;_classCallCheck(this,EnhancedTableHead);for(var _len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return _ret=(_temp=(_this=_possibleConstructorReturn(this,(_ref=EnhancedTableHead.__proto__||Object.getPrototypeOf(EnhancedTableHead)).call.apply(_ref,[this].concat(args))),_this),_this.createSortHandler=function(property){return function(event){_this.props.onRequestSort(event,property);};},_temp),_possibleConstructorReturn(_this,_ret);}_createClass(EnhancedTableHead,[{key:'render',value:function render(){var _this2=this;var _props=this.props,onSelectAllClick=_props.onSelectAllClick,order=_props.order,orderBy=_props.orderBy,numSelected=_props.numSelected,rowCount=_props.rowCount,rowHeaders=_props.rowHeaders,classes=_props.classes;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"E\" /* TableHead */],{className:classes.head},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"G\" /* TableRow */],null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"D\" /* TableCell */],{padding:'checkbox'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"c\" /* Checkbox */],{indeterminate:numSelected>0&&numSelected<rowCount,checked:numSelected===rowCount,onChange:onSelectAllClick})),rowHeaders.map(function(row){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"D\" /* TableCell */],{key:row.label,numeric:row.numeric,padding:row.disablePadding?'none':'default',sortDirection:orderBy===row.label?order:false},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"L\" /* Tooltip */],{title:'Sort',placement:row.numeric?'bottom-end':'bottom-start',enterDelay:300},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"H\" /* TableSortLabel */],{active:orderBy===row.label,direction:order,onClick:_this2.createSortHandler(row.label)},row.label)));},this)));}}]);return EnhancedTableHead;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);/* harmony default export */ __webpack_exports__[\"a\"] = (Object(__WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__[\"withStyles\"])(styles,{withTheme:true})(EnhancedTableHead));\n\n/***/ }),\n\n/***/ 6358:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_classnames___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_classnames__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__material_ui_core_styles__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__material_ui_core_styles___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__material_ui_core_styles__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__material_ui_core__ = __webpack_require__(143);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__material_ui_icons_Delete__ = __webpack_require__(145);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__material_ui_icons_Delete___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__material_ui_icons_Delete__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__material_ui_icons_InsertDriveFile__ = __webpack_require__(162);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__material_ui_icons_InsertDriveFile___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__material_ui_icons_InsertDriveFile__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__material_ui_icons_FilterList__ = __webpack_require__(161);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__material_ui_icons_FilterList___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__material_ui_icons_FilterList__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__material_ui_icons_Straighten__ = __webpack_require__(164);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__material_ui_icons_Straighten___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__material_ui_icons_Straighten__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__material_ui_core_styles_colorManipulator__ = __webpack_require__(29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__material_ui_core_styles_colorManipulator___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__material_ui_core_styles_colorManipulator__);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var styles=function styles(theme){return{root:{paddingRight:theme.spacing.unit},highlight:theme.palette.type==='light'?{color:theme.palette.secondary.main,backgroundColor:Object(__WEBPACK_IMPORTED_MODULE_8__material_ui_core_styles_colorManipulator__[\"lighten\"])(theme.palette.secondary.light,0.85)}:{color:theme.palette.text.primary,backgroundColor:theme.palette.secondary.dark},spacer:{flex:'1 1 100%'},actions:{color:theme.palette.text.secondary},title:{flex:'0 0 auto'},actionDiv:{display:'inline-flex'}};};/**\r\n   * displayed above the table. gives user ability to press filter button. Or if some features are selected\r\n   * it will show how many features are selected and give choices to delete selection or create a new layer \r\n   * from selection.\r\n   */var SecondaryTableToolbar=function(_Component){_inherits(SecondaryTableToolbar,_Component);function SecondaryTableToolbar(){_classCallCheck(this,SecondaryTableToolbar);return _possibleConstructorReturn(this,(SecondaryTableToolbar.__proto__||Object.getPrototypeOf(SecondaryTableToolbar)).apply(this,arguments));}_createClass(SecondaryTableToolbar,[{key:'render',value:function render(){var _props=this.props,displayFilter=_props.displayFilter,numSelected=_props.numSelected,classes=_props.classes,layer=_props.layer,addAreaColumn=_props.addAreaColumn,handleDeleteSelected=_props.handleDeleteSelected,handleNewLayerFromSelected=_props.handleNewLayerFromSelected;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__material_ui_core__[\"K\" /* Toolbar */],{className:__WEBPACK_IMPORTED_MODULE_1_classnames___default()(classes.root,_defineProperty({},classes.highlight,numSelected>0))},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:classes.title},numSelected>0?__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__material_ui_core__[\"M\" /* Typography */],{color:'inherit',variant:'subtitle1'},numSelected,' selected'):__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__material_ui_core__[\"M\" /* Typography */],{variant:'h6',id:'tableTitle'},layer.displayName)),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:classes.spacer}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:classes.actions},numSelected>0?__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:classes.actionDiv},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__material_ui_core__[\"L\" /* Tooltip */],{title:'New Layer From Selection'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__material_ui_core__[\"l\" /* IconButton */],{'aria-label':'New',onClick:handleNewLayerFromSelected},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5__material_ui_icons_InsertDriveFile___default.a,null))),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__material_ui_core__[\"L\" /* Tooltip */],{title:'Delete Selection'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__material_ui_core__[\"l\" /* IconButton */],{'aria-label':'Delete',onClick:handleDeleteSelected},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__material_ui_icons_Delete___default.a,null)))):__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:classes.actionDiv},layer.type==='Polygon'||layer.type==='MultiPolygon'?__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__material_ui_core__[\"L\" /* Tooltip */],{title:'Calculate Area'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__material_ui_core__[\"l\" /* IconButton */],{'aria-label':'calculate',onClick:addAreaColumn},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_7__material_ui_icons_Straighten___default.a,null))):null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__material_ui_core__[\"L\" /* Tooltip */],{title:'Filter list'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__material_ui_core__[\"l\" /* IconButton */],{'aria-label':'Filter list',onClick:displayFilter},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_6__material_ui_icons_FilterList___default.a,null))))));}}]);return SecondaryTableToolbar;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);/* harmony default export */ __webpack_exports__[\"a\"] = (Object(__WEBPACK_IMPORTED_MODULE_2__material_ui_core_styles__[\"withStyles\"])(styles,{withTheme:true})(SecondaryTableToolbar));\n\n/***/ }),\n\n/***/ 6359:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__material_ui_core__ = __webpack_require__(143);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Close__ = __webpack_require__(149);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Close___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Close__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__FilterChip__ = __webpack_require__(6360);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}/**\r\n * Container for all the filterChips (containing the filter sentences)\r\n */var styles=function styles(theme){return{spacer:{flex:'1 1 100%'},actions:{color:theme.palette.text.secondary},title:{flex:'0 0 auto'},chip:{margin:theme.spacing.unit},button:{margin:theme.spacing.unit,minWidth:0}};};var FilterChipContainer=function(_Component){_inherits(FilterChipContainer,_Component);function FilterChipContainer(){_classCallCheck(this,FilterChipContainer);return _possibleConstructorReturn(this,(FilterChipContainer.__proto__||Object.getPrototypeOf(FilterChipContainer)).apply(this,arguments));}_createClass(FilterChipContainer,[{key:'render',value:function render(){var _props=this.props,classes=_props.classes,filterSentences=_props.filterSentences,addNewFilter=_props.addNewFilter,deleteFilterSentence=_props.deleteFilterSentence,removeAllFilters=_props.removeAllFilters,rowHeaders=_props.rowHeaders;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"K\" /* Toolbar */],{className:classes.root},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:classes.title},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"M\" /* Typography */],{variant:'h6'},'Filter Attributes')),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:classes.spacer}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:classes.actions},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"L\" /* Tooltip */],{title:'Remove Filters'},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"l\" /* IconButton */],{'aria-label':'Close',onClick:removeAllFilters},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Close___default.a,null))))),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__FilterChip__[\"a\" /* default */],{label:'wip',submitFilter:addNewFilter,rowHeaders:rowHeaders}),filterSentences.map(function(filter,i){var s=filter.attrib+' '+filter.operator+' '+filter.val;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__FilterChip__[\"a\" /* default */],{key:i,label:s,sentence:s,index:i,deleteSentence:deleteFilterSentence});}));}}]);return FilterChipContainer;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);/* harmony default export */ __webpack_exports__[\"a\"] = (Object(__WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__[\"withStyles\"])(styles,{withTheme:true})(FilterChipContainer));\n\n/***/ }),\n\n/***/ 6360:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__material_ui_core__ = __webpack_require__(143);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Delete__ = __webpack_require__(145);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Delete___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Delete__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__material_ui_icons_Done__ = __webpack_require__(160);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__material_ui_icons_Done___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__material_ui_icons_Done__);\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return call&&(typeof call===\"object\"||typeof call===\"function\")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function, not \"+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var numericOperators=['>','>=','<','<=','==','!='];var stringOperators=['equals','includes','startsWith'];var styles=function styles(theme){return{mainDiv:{borderRadius:2,margin:theme.spacing.unit,listStyle:'none',backgroundColor:theme.palette.action.hover},select:{marginRight:theme.spacing.unit,marginTop:0,marginBottom:0,minWidth:80}};};/**\r\n   * Filter chip contains a single filter sentence. If it has label 'wip', this meens that the sentence is\r\n   * currently being constructed. Otherwise it is a completed sentence.\r\n   */var FilterChip=function(_Component){_inherits(FilterChip,_Component);function FilterChip(props){_classCallCheck(this,FilterChip);var _this=_possibleConstructorReturn(this,(FilterChip.__proto__||Object.getPrototypeOf(FilterChip)).call(this,props));_this.handleChange=function(name){return function(event){var isNumeric=_this.state.isNumeric;var rowHeaders=_this.props.rowHeaders;var value=event.target.value;if(name==='attrib'){_this.setState({isNumeric:rowHeaders.find(function(rh){return rh.label===value;}).numeric});}if(name==='val'){if(isNumeric){if(isNaN(Number(value))){_this.setState({TextFieldError:true});}else if(value!==''){value=Number(value);_this.setState({TextFieldError:false});}}}_this.setState(_defineProperty({},name,value));};};_this.submitFilter=function(){var _this$state=_this.state,attrib=_this$state.attrib,operator=_this$state.operator,val=_this$state.val,isNumeric=_this$state.isNumeric;if(attrib&&operator&&val){_this.setState({attrib:'',operator:'',val:''});_this.props.submitFilter({attrib:attrib,operator:operator,val:val,isNumeric:isNumeric});}};_this.keyupHandler=_this.keyupHandler.bind(_this);_this.state={attrib:'',operator:'',val:''};return _this;}_createClass(FilterChip,[{key:'componentDidMount',value:function componentDidMount(){document.addEventListener('keyup',this.keyupHandler,false);}},{key:'componentWillUnmount',value:function componentWillUnmount(){document.removeEventListener('keyup',this.keyupHandler,false);}},{key:'keyupHandler',value:function keyupHandler(e){if(e.keyCode===13){this.submitFilter();}}},{key:'render',value:function render(){var _this2=this;var _props=this.props,classes=_props.classes,sentence=_props.sentence,index=_props.index,deleteSentence=_props.deleteSentence,label=_props.label,rowHeaders=_props.rowHeaders;var _state=this.state,attrib=_state.attrib,operator=_state.operator,val=_state.val,isNumeric=_state.isNumeric,TextFieldError=_state.TextFieldError;var operatorList=isNumeric?numericOperators:stringOperators;var errorText=TextFieldError?'Input must be a number':'';var hasError=TextFieldError||!attrib||!operator||val.length===0;return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement('div',{className:classes.mainDiv},label==='wip'?__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"p\" /* ListItem */],{button:true,style:{padding:5}},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"s\" /* ListItemText */],null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"x\" /* Select */],{className:classes.select,label:'Attribute',value:attrib,placeholder:'Attribute',onChange:this.handleChange('attrib'),input:__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"m\" /* Input */],{name:'name',id:'attrib-disabled'})},rowHeaders.map(function(attrib,i){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"u\" /* MenuItem */],{key:i,value:attrib.label},attrib.label);})),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"x\" /* Select */],{className:classes.select,disabled:attrib.length<1,value:operator,placeholder:'Operator',onChange:this.handleChange('operator'),input:__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"m\" /* Input */],{name:'operator',id:'operator'})},operatorList.map(function(operator,i){return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"u\" /* MenuItem */],{key:i,value:operator},operator);})),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"J\" /* TextField */],{className:classes.select,value:val,disabled:attrib.length<1,onChange:this.handleChange('val'),margin:'normal',error:TextFieldError,helperText:errorText})),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"r\" /* ListItemSecondaryAction */],null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"l\" /* IconButton */],{'aria-label':'Add',disabled:hasError,onClick:function onClick(){return _this2.submitFilter();}},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__material_ui_icons_Done___default.a,{color:'primary'})))):__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"p\" /* ListItem */],{button:true,style:{padding:5}},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"s\" /* ListItemText */],{secondary:sentence}),__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"r\" /* ListItemSecondaryAction */],null,__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__material_ui_core__[\"l\" /* IconButton */],{'aria-label':'Delete',onClick:function onClick(){return deleteSentence(index);}},__WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__material_ui_icons_Delete___default.a,null)))));}}]);return FilterChip;}(__WEBPACK_IMPORTED_MODULE_0_react__[\"Component\"]);/* harmony default export */ __webpack_exports__[\"a\"] = (Object(__WEBPACK_IMPORTED_MODULE_1__material_ui_core_styles__[\"withStyles\"])(styles,{withTheme:true})(FilterChip));\n\n/***/ }),\n\n/***/ 6361:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__turf_area__ = __webpack_require__(6362);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__turf_area___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__turf_area__);\n/**\r\n * Adds an Area property to each feature of a polygon featureCollection\r\n */var areaOfPolygons=function areaOfPolygons(geojson){geojson.features.forEach(function(f){f.properties['Area_(m^2)']=__WEBPACK_IMPORTED_MODULE_0__turf_area___default()(f);});return geojson;};/* harmony default export */ __webpack_exports__[\"a\"] = (areaOfPolygons);\n\n/***/ }),\n\n/***/ 6362:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = __webpack_require__(6363);\n// Note: change RADIUS => earthRadius\nvar RADIUS = 6378137;\n/**\n * Takes one or more features and returns their area in square meters.\n *\n * @name area\n * @param {GeoJSON} geojson input GeoJSON feature(s)\n * @returns {number} area in square meters\n * @example\n * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\n *\n * var area = turf.area(polygon);\n *\n * //addToMap\n * var addToMap = [polygon]\n * polygon.properties.area = area\n */\nfunction area(geojson) {\n    return meta_1.geomReduce(geojson, function (value, geom) {\n        return value + calculateArea(geom);\n    }, 0);\n}\nexports.default = area;\n/**\n * Calculate Area\n *\n * @private\n * @param {Geometry} geom GeoJSON Geometries\n * @returns {number} area\n */\nfunction calculateArea(geom) {\n    var total = 0;\n    var i;\n    switch (geom.type) {\n        case \"Polygon\":\n            return polygonArea(geom.coordinates);\n        case \"MultiPolygon\":\n            for (i = 0; i < geom.coordinates.length; i++) {\n                total += polygonArea(geom.coordinates[i]);\n            }\n            return total;\n        case \"Point\":\n        case \"MultiPoint\":\n        case \"LineString\":\n        case \"MultiLineString\":\n            return 0;\n    }\n    return 0;\n}\nfunction polygonArea(coords) {\n    var total = 0;\n    if (coords && coords.length > 0) {\n        total += Math.abs(ringArea(coords[0]));\n        for (var i = 1; i < coords.length; i++) {\n            total -= Math.abs(ringArea(coords[i]));\n        }\n    }\n    return total;\n}\n/**\n * @private\n * Calculate the approximate area of the polygon were it projected onto the earth.\n * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.\n *\n * Reference:\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for Polygons on a Sphere\",\n * JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007 http://trs-new.jpl.nasa.gov/dspace/handle/2014/40409\n *\n * @param {Array<Array<number>>} coords Ring Coordinates\n * @returns {number} The approximate signed geodesic area of the polygon in square meters.\n */\nfunction ringArea(coords) {\n    var p1;\n    var p2;\n    var p3;\n    var lowerIndex;\n    var middleIndex;\n    var upperIndex;\n    var i;\n    var total = 0;\n    var coordsLength = coords.length;\n    if (coordsLength > 2) {\n        for (i = 0; i < coordsLength; i++) {\n            if (i === coordsLength - 2) {\n                lowerIndex = coordsLength - 2;\n                middleIndex = coordsLength - 1;\n                upperIndex = 0;\n            }\n            else if (i === coordsLength - 1) {\n                lowerIndex = coordsLength - 1;\n                middleIndex = 0;\n                upperIndex = 1;\n            }\n            else {\n                lowerIndex = i;\n                middleIndex = i + 1;\n                upperIndex = i + 2;\n            }\n            p1 = coords[lowerIndex];\n            p2 = coords[middleIndex];\n            p3 = coords[upperIndex];\n            total += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));\n        }\n        total = total * RADIUS * RADIUS / 2;\n    }\n    return total;\n}\nfunction rad(num) {\n    return num * Math.PI / 180;\n}\n\n\n/***/ }),\n\n/***/ 6363:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = __webpack_require__(5740);\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n    // Handles null Geometry -- Skips this GeoJSON\n    if (geojson === null) return;\n    var j, k, l, geometry, stopG, coords,\n        geometryMaybeCollection,\n        wrapShrink = 0,\n        coordIndex = 0,\n        isGeometryCollection,\n        type = geojson.type,\n        isFeatureCollection = type === 'FeatureCollection',\n        isFeature = type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n            var multiFeatureIndex = 0;\n            var geometryIndex = 0;\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;\n\n            // Handles null Geometry -- Skips this geometry\n            if (geometry === null) continue;\n            coords = geometry.coordinates;\n            var geomType = geometry.type;\n\n            wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;\n\n            switch (geomType) {\n            case null:\n                break;\n            case 'Point':\n                if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                coordIndex++;\n                multiFeatureIndex++;\n                break;\n            case 'LineString':\n            case 'MultiPoint':\n                for (j = 0; j < coords.length; j++) {\n                    if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                    coordIndex++;\n                    if (geomType === 'MultiPoint') multiFeatureIndex++;\n                }\n                if (geomType === 'LineString') multiFeatureIndex++;\n                break;\n            case 'Polygon':\n            case 'MultiLineString':\n                for (j = 0; j < coords.length; j++) {\n                    for (k = 0; k < coords[j].length - wrapShrink; k++) {\n                        if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                        coordIndex++;\n                    }\n                    if (geomType === 'MultiLineString') multiFeatureIndex++;\n                    if (geomType === 'Polygon') geometryIndex++;\n                }\n                if (geomType === 'Polygon') multiFeatureIndex++;\n                break;\n            case 'MultiPolygon':\n                for (j = 0; j < coords.length; j++) {\n                    geometryIndex = 0;\n                    for (k = 0; k < coords[j].length; k++) {\n                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                            if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                            coordIndex++;\n                        }\n                        geometryIndex++;\n                    }\n                    multiFeatureIndex++;\n                }\n                break;\n            case 'GeometryCollection':\n                for (j = 0; j < geometry.geometries.length; j++)\n                    if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;\n                break;\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n    var previousValue = initialValue;\n    coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;\n        else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n    }, excludeWrapCoord);\n    return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n    var i;\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        for (i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i].properties, i) === false) break;\n        }\n        break;\n    case 'Feature':\n        callback(geojson.properties, 0);\n        break;\n    }\n}\n\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    propEach(geojson, function (currentProperties, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;\n        else previousValue = callback(previousValue, currentProperties, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n    if (geojson.type === 'Feature') {\n        callback(geojson, 0);\n    } else if (geojson.type === 'FeatureCollection') {\n        for (var i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i], i) === false) break;\n        }\n    }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    featureEach(geojson, function (currentFeature, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n    var coords = [];\n    coordEach(geojson, function (coord) {\n        coords.push(coord);\n    });\n    return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n    var i, j, g, geometry, stopG,\n        geometryMaybeCollection,\n        isGeometryCollection,\n        featureProperties,\n        featureBBox,\n        featureId,\n        featureIndex = 0,\n        isFeatureCollection = geojson.type === 'FeatureCollection',\n        isFeature = geojson.type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (i = 0; i < stop; i++) {\n\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[i].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        featureProperties = (isFeatureCollection ? geojson.features[i].properties :\n            (isFeature ? geojson.properties : {}));\n        featureBBox = (isFeatureCollection ? geojson.features[i].bbox :\n            (isFeature ? geojson.bbox : undefined));\n        featureId = (isFeatureCollection ? geojson.features[i].id :\n            (isFeature ? geojson.id : undefined));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (g = 0; g < stopG; g++) {\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n\n            // Handle null Geometry\n            if (geometry === null) {\n                if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                continue;\n            }\n            switch (geometry.type) {\n            case 'Point':\n            case 'LineString':\n            case 'MultiPoint':\n            case 'Polygon':\n            case 'MultiLineString':\n            case 'MultiPolygon': {\n                if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                break;\n            }\n            case 'GeometryCollection': {\n                for (j = 0; j < geometry.geometries.length; j++) {\n                    if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                }\n                break;\n            }\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n        // Only increase `featureIndex` per each feature\n        featureIndex++;\n    }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;\n        else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n    geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n        // Callback for single geometry\n        var type = (geometry === null) ? null : geometry.type;\n        switch (type) {\n        case null:\n        case 'Point':\n        case 'LineString':\n        case 'Polygon':\n            if (callback(helpers.feature(geometry, properties, {bbox: bbox, id: id}), featureIndex, 0) === false) return false;\n            return;\n        }\n\n        var geomType;\n\n        // Callback for multi-geometry\n        switch (type) {\n        case 'MultiPoint':\n            geomType = 'Point';\n            break;\n        case 'MultiLineString':\n            geomType = 'LineString';\n            break;\n        case 'MultiPolygon':\n            geomType = 'Polygon';\n            break;\n        }\n\n        for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {\n            var coordinate = geometry.coordinates[multiFeatureIndex];\n            var geom = {\n                type: geomType,\n                coordinates: coordinate\n            };\n            if (callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;\n        }\n    });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {\n        if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n        var segmentIndex = 0;\n\n        // Exclude null Geometries\n        if (!feature.geometry) return;\n        // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n        var type = feature.geometry.type;\n        if (type === 'Point' || type === 'MultiPoint') return;\n\n        // Generate 2-vertex line segments\n        var previousCoords;\n        var previousFeatureIndex = 0;\n        var previousMultiIndex = 0;\n        var prevGeomIndex = 0;\n        if (coordEach(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {\n            // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n            if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {\n                previousCoords = currentCoord;\n                previousFeatureIndex = featureIndex;\n                previousMultiIndex = multiPartIndexCoord;\n                prevGeomIndex = geometryIndex;\n                segmentIndex = 0;\n                return;\n            }\n            var currentSegment = helpers.lineString([previousCoords, currentCoord], feature.properties);\n            if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;\n            segmentIndex++;\n            previousCoords = currentCoord;\n        }) === false) return false;\n    });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentInex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    var started = false;\n    segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n        if (started === false && initialValue === undefined) previousValue = currentSegment;\n        else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);\n        started = true;\n    });\n    return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n    // validation\n    if (!geojson) throw new Error('geojson is required');\n\n    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n        if (feature.geometry === null) return;\n        var type = feature.geometry.type;\n        var coords = feature.geometry.coordinates;\n        switch (type) {\n        case 'LineString':\n            if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;\n            break;\n        case 'Polygon':\n            for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {\n                if (callback(helpers.lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n            }\n            break;\n        }\n    });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;\n        else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var segmentIndex = options.segmentIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find SegmentIndex\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n        if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n        return helpers.lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n        return helpers.lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n        return helpers.lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n        return helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var coordIndex = options.coordIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find Coord Index\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n        return helpers.point(coords, properties, options);\n    case 'MultiPoint':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        return helpers.point(coords[multiFeatureIndex], properties, options);\n    case 'LineString':\n        if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n        return helpers.point(coords[coordIndex], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;\n        return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;\n        return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n        return helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.coordAll = coordAll;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.findSegment = findSegment;\nexports.findPoint = findPoint;\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/1.83b4061a.chunk.js","import React, {Component} from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Drawer, Divider } from '@material-ui/core';\r\nimport AttributeTableToolbar from '../components/AttributeTableContent/AttributeTableToolbar';\r\nimport AttributeTableTable from '../components/AttributeTableContent/AttributeTableTable';\r\nimport FilterChipContainer from '../components/AttributeTableContent/FilterChipContainer';\r\nimport areaOfPolygons from '../utils/geoprocessing/areaOfPolygons';\r\n\r\n/**\r\n * Shows up at bottom of page if Attribute table is opened.\r\n */\r\nconst styles = theme => ({\r\n    drawer: {\r\n        width: '100%',\r\n        maxHeight: '70%',\r\n        flexShrink: 0,\r\n      },\r\n      drawerPaper: {\r\n        width: '100%',\r\n        zIndex: 20000\r\n      },\r\n      tableRoot: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap:'wrap'\r\n      },\r\n      tableContent: {\r\n        backgroundColor: theme.palette.action.hover,\r\n        minWidth: 500,\r\n        height: '100%',\r\n        margin: theme.spacing.unit,\r\n      }\r\n  });\r\n\r\n  class AttributeTable extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n      const {layers, layerId} = props;\r\n\r\n      let layer = layers.find(l => l.id === layerId);        \r\n      let data = layer ? this.getRowHeadersAndData(layer): '';\r\n\r\n      this.state = {\r\n          data: data ? data.data: '',\r\n          rowHeaders:  data ? data.rowHeaders: '',\r\n          selected: [],\r\n          filterSentences: [],\r\n          showFilter: false\r\n        };\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n      if(prevProps.layerId !== this.props.layerId) {\r\n        const {layers, layerId} = this.props;\r\n        let layer = layers.find(l => l.id === layerId);        \r\n        let data = layer ? this.getRowHeadersAndData(layer): '' ;\r\n        this.setState({\r\n          data: data ? data.data: '',\r\n          rowHeaders:  data ? data.rowHeaders: '',\r\n          layer: layer});\r\n      }\r\n    }\r\n\r\n    getRowHeadersAndData = (layer) => {\r\n      let data = [];\r\n      let rowHeaderSet = new Set([]);\r\n      let rowHeaderType = {};\r\n\r\n\r\n       layer.data.features.forEach((feature, index) => {\r\n          feature.id = feature.id ? feature.id: index;\r\n          let dataObj = {};         \r\n          Object.assign(dataObj, feature.properties);\r\n          dataObj['id'] = feature.id;\r\n          data.push(dataObj);\r\n          Object.keys(feature.properties).forEach(key => {\r\n               rowHeaderSet.add(key);\r\n               rowHeaderType[key] = typeof feature.properties[key]\r\n          })\r\n      });\r\n\r\n      let rowHeaders = [...rowHeaderSet].map((header) => {\r\n          return {label: header, numeric: rowHeaderType[header] === 'number' };\r\n      });\r\n\r\n      return {\r\n        data: data,\r\n        rowHeaders: rowHeaders\r\n      }\r\n    }\r\n\r\n    displayFilter = () => {\r\n      this.setState({showFilter: true});\r\n    }\r\n\r\n    filterSelection = (filterSentences) => {\r\n      const {data} = this.state;\r\n      let selected = [];\r\n      \r\n      if(filterSentences.length > 0 ) {\r\n        data.forEach((dataElem, index) => {\r\n          let selectElem = true;\r\n          filterSentences.forEach(filterElem => {\r\n            //Must match all criteria\r\n            let query = filterElem.isNumeric ?\r\n                  dataElem[filterElem.attrib] + filterElem.operator + filterElem.val\r\n                  : '\"' + dataElem[filterElem.attrib] + '\"' + '.' + filterElem.operator + '(\"' + filterElem.val.toString() + '\")';\r\n  \r\n            if (filterElem.operator  === 'equals') {\r\n              query =  '\"' + dataElem[filterElem.attrib] + '\"' + '===' +  '\"' + filterElem.val.toString() + '\"';\r\n            }\r\n  \r\n            if(!eval( query)){\r\n              selectElem = false;\r\n            }\r\n          })\r\n  \r\n          if(selectElem) {\r\n            selected.push(dataElem.id);\r\n          }\r\n        });\r\n      }\r\n\r\n\r\n      this.setState({selected: selected});\r\n    }\r\n\r\n    addNewFilter = (filter) => {\r\n      let {filterSentences} = this.state;\r\n      filterSentences.push(filter);\r\n\r\n      this.filterSelection(filterSentences)\r\n\r\n      this.setState({\r\n        filterSentences: filterSentences,\r\n      });\r\n    }\r\n\r\n    removeAllFilters = () => {\r\n      this.setState({\r\n        filterSentences: [],\r\n        showFilter: false\r\n      })\r\n    }\r\n\r\n    deleteFilterSentence = (i) => {\r\n      let {filterSentences} = this.state;\r\n      filterSentences.splice(i, 1);\r\n      this.filterSelection(filterSentences)\r\n      this.setState(filterSentences);\r\n    }\r\n\r\n    handleSelectAllClick = event => {\r\n      if (event.target.checked) {\r\n        this.setState(state => ({ selected: state.data.map(n => n.id) }));\r\n        return;\r\n      }\r\n      this.setState({ selected: [] });\r\n    };\r\n\r\n    handleDeleteSelected = () => {\r\n      let {receiveNewData, layerId, layers} = this.props;\r\n      let {selected} = this.state;\r\n\r\n      let layer = layers.find(l => l.id === layerId);\r\n      layer.data.features = layer.data.features.filter(feature => {\r\n        return !selected.includes(feature.id)});\r\n    \r\n      let data = layer ? this.getRowHeadersAndData(layer): '' ;\r\n      this.setState({\r\n        data: data ? data.data: '',\r\n        rowHeaders:  data ? data.rowHeaders: '',\r\n        layer: layer,\r\n        selected: []});\r\n\r\n    receiveNewData(layerId);\r\n\r\n    }\r\n\r\n    handleNewLayerFromSelected = () => {\r\n      let {receiveNewJson, layerId, layers, closeAttribTable} = this.props;\r\n      let {selected} = this.state;\r\n      let layer = layers.find(l => l.id === layerId);   \r\n      let features = JSON.parse(JSON.stringify(layer.data.features)); // Create a deep clone copy\r\n      \r\n      features = features.filter(feature => selected.includes(feature.id));\r\n\r\n      let json = {\r\n        \"type\": \"FeatureCollection\",\r\n        \"features\": features\r\n      }\r\n\r\n      receiveNewJson(json, layer.displayName + '_filtered');\r\n      closeAttribTable();\r\n    }\r\n\r\n    handleClick = (event, id) => {\r\n      const { selected } = this.state;\r\n      const selectedIndex = selected.indexOf(id);\r\n      let newSelected = [];\r\n  \r\n      if (selectedIndex === -1) {\r\n        newSelected = newSelected.concat(selected, id);\r\n      } else if (selectedIndex === 0) {\r\n        newSelected = newSelected.concat(selected.slice(1));\r\n      } else if (selectedIndex === selected.length - 1) {\r\n        newSelected = newSelected.concat(selected.slice(0, -1));\r\n      } else if (selectedIndex > 0) {\r\n        newSelected = newSelected.concat(\r\n          selected.slice(0, selectedIndex),\r\n          selected.slice(selectedIndex + 1),\r\n        );\r\n      }\r\n  \r\n      this.setState({ selected: newSelected });\r\n    };\r\n\r\n    addAreaColumn = () => {\r\n      const {layers, layerId} = this.props;\r\n\r\n      let layer = layers.find(l => l.id === layerId);\r\n      layer.data = areaOfPolygons(layer.data);\r\n      let data = layer ? this.getRowHeadersAndData(layer): '';\r\n\r\n      this.setState({\r\n          data: data ? data.data: '',\r\n          rowHeaders:  data ? data.rowHeaders: '',\r\n        });\r\n    }\r\n    \r\n    render() {\r\n      const { classes, open, closeAttribTable, layerId, layers,} = this.props;\r\n      const { data, selected, rowHeaders, filterSentences, showFilter } = this.state;\r\n\r\n      return (\r\n        <div>\r\n        <Drawer\r\n          className={classes.drawer}\r\n          variant=\"persistent\"\r\n          anchor=\"bottom\"\r\n          open={open}\r\n          classes={{\r\n            paper: classes.drawerPaper,\r\n          }}\r\n        >\r\n          <AttributeTableToolbar closeAttribTable={closeAttribTable}/>\r\n          <Divider />\r\n\r\n          {layerId ? \r\n            <div className={classes.tableRoot}>\r\n                {showFilter ?\r\n                <div className={classes.tableContent}>\r\n                  <FilterChipContainer\r\n                    addNewFilter={this.addNewFilter.bind(this)}\r\n                    filterSentences={filterSentences}\r\n                    deleteFilterSentence={this.deleteFilterSentence.bind(this)}\r\n                    removeAllFilters={this.removeAllFilters.bind(this)}\r\n                    rowHeaders={rowHeaders}\r\n                    />\r\n                </div>\r\n                : null}\r\n                <div className={classes.tableContent}>\r\n                    <AttributeTableTable\r\n                      layerId={layerId}\r\n                      layers={layers}\r\n                      data={data}\r\n                      rowHeaders={rowHeaders}\r\n                      selected={selected}\r\n                      handleSelectAllClick={this.handleSelectAllClick.bind(this)}\r\n                      handleDeleteSelected={this.handleDeleteSelected.bind(this)}\r\n                      handleNewLayerFromSelected={this.handleNewLayerFromSelected.bind(this)}\r\n                      handleClick={this.handleClick.bind(this)}\r\n                      displayFilter={this.displayFilter.bind(this)}\r\n                      addAreaColumn={this.addAreaColumn.bind(this)}\r\n                      />\r\n                </div>\r\n            </div>\r\n            :null}\r\n\r\n\r\n          \r\n        </Drawer>\r\n        </div>\r\n      );\r\n  \r\n  \r\n    }\r\n\r\n  }\r\n\r\nexport default withStyles(styles, { withTheme: true })(AttributeTable);\n\n\n// WEBPACK FOOTER //\n// ./src/layout/AttributeTable.js","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * @module helpers\n */\n/**\n * Earth Radius used with the Harvesine formula and approximates using a spherical (non-ellipsoid) Earth.\n *\n * @memberof helpers\n * @type {number}\n */\nexports.earthRadius = 6371008.8;\n/**\n * Unit of measurement factors using a spherical (non-ellipsoid) earth radius.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.factors = {\n    centimeters: exports.earthRadius * 100,\n    centimetres: exports.earthRadius * 100,\n    degrees: exports.earthRadius / 111325,\n    feet: exports.earthRadius * 3.28084,\n    inches: exports.earthRadius * 39.370,\n    kilometers: exports.earthRadius / 1000,\n    kilometres: exports.earthRadius / 1000,\n    meters: exports.earthRadius,\n    metres: exports.earthRadius,\n    miles: exports.earthRadius / 1609.344,\n    millimeters: exports.earthRadius * 1000,\n    millimetres: exports.earthRadius * 1000,\n    nauticalmiles: exports.earthRadius / 1852,\n    radians: 1,\n    yards: exports.earthRadius / 1.0936,\n};\n/**\n * Units of measurement factors based on 1 meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.unitsFactors = {\n    centimeters: 100,\n    centimetres: 100,\n    degrees: 1 / 111325,\n    feet: 3.28084,\n    inches: 39.370,\n    kilometers: 1 / 1000,\n    kilometres: 1 / 1000,\n    meters: 1,\n    metres: 1,\n    miles: 1 / 1609.344,\n    millimeters: 1000,\n    millimetres: 1000,\n    nauticalmiles: 1 / 1852,\n    radians: 1 / exports.earthRadius,\n    yards: 1 / 1.0936,\n};\n/**\n * Area of measurement factors based on 1 square meter.\n *\n * @memberof helpers\n * @type {Object}\n */\nexports.areaFactors = {\n    acres: 0.000247105,\n    centimeters: 10000,\n    centimetres: 10000,\n    feet: 10.763910417,\n    inches: 1550.003100006,\n    kilometers: 0.000001,\n    kilometres: 0.000001,\n    meters: 1,\n    metres: 1,\n    miles: 3.86e-7,\n    millimeters: 1000000,\n    millimetres: 1000000,\n    yards: 1.195990046,\n};\n/**\n * Wraps a GeoJSON {@link Geometry} in a GeoJSON {@link Feature}.\n *\n * @name feature\n * @param {Geometry} geometry input geometry\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature} a GeoJSON Feature\n * @example\n * var geometry = {\n *   \"type\": \"Point\",\n *   \"coordinates\": [110, 50]\n * };\n *\n * var feature = turf.feature(geometry);\n *\n * //=feature\n */\nfunction feature(geom, properties, options) {\n    if (options === void 0) { options = {}; }\n    var feat = { type: \"Feature\" };\n    if (options.id === 0 || options.id) {\n        feat.id = options.id;\n    }\n    if (options.bbox) {\n        feat.bbox = options.bbox;\n    }\n    feat.properties = properties || {};\n    feat.geometry = geom;\n    return feat;\n}\nexports.feature = feature;\n/**\n * Creates a GeoJSON {@link Geometry} from a Geometry string type & coordinates.\n * For GeometryCollection type use `helpers.geometryCollection`\n *\n * @name geometry\n * @param {string} type Geometry Type\n * @param {Array<any>} coordinates Coordinates\n * @param {Object} [options={}] Optional Parameters\n * @returns {Geometry} a GeoJSON Geometry\n * @example\n * var type = \"Point\";\n * var coordinates = [110, 50];\n * var geometry = turf.geometry(type, coordinates);\n * // => geometry\n */\nfunction geometry(type, coordinates, options) {\n    if (options === void 0) { options = {}; }\n    switch (type) {\n        case \"Point\": return point(coordinates).geometry;\n        case \"LineString\": return lineString(coordinates).geometry;\n        case \"Polygon\": return polygon(coordinates).geometry;\n        case \"MultiPoint\": return multiPoint(coordinates).geometry;\n        case \"MultiLineString\": return multiLineString(coordinates).geometry;\n        case \"MultiPolygon\": return multiPolygon(coordinates).geometry;\n        default: throw new Error(type + \" is invalid\");\n    }\n}\nexports.geometry = geometry;\n/**\n * Creates a {@link Point} {@link Feature} from a Position.\n *\n * @name point\n * @param {Array<number>} coordinates longitude, latitude position (each in decimal degrees)\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Point>} a Point feature\n * @example\n * var point = turf.point([-75.343, 39.984]);\n *\n * //=point\n */\nfunction point(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"Point\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.point = point;\n/**\n * Creates a {@link Point} {@link FeatureCollection} from an Array of Point coordinates.\n *\n * @name points\n * @param {Array<Array<number>>} coordinates an array of Points\n * @param {Object} [properties={}] Translate these properties to each Feature\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Point>} Point Feature\n * @example\n * var points = turf.points([\n *   [-75, 39],\n *   [-80, 45],\n *   [-78, 50]\n * ]);\n *\n * //=points\n */\nfunction points(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return point(coords, properties);\n    }), options);\n}\nexports.points = points;\n/**\n * Creates a {@link Polygon} {@link Feature} from an Array of LinearRings.\n *\n * @name polygon\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<Polygon>} Polygon Feature\n * @example\n * var polygon = turf.polygon([[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]], { name: 'poly1' });\n *\n * //=polygon\n */\nfunction polygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    for (var _i = 0, coordinates_1 = coordinates; _i < coordinates_1.length; _i++) {\n        var ring = coordinates_1[_i];\n        if (ring.length < 4) {\n            throw new Error(\"Each LinearRing of a Polygon must have 4 or more Positions.\");\n        }\n        for (var j = 0; j < ring[ring.length - 1].length; j++) {\n            // Check if first point of Polygon contains two numbers\n            if (ring[ring.length - 1][j] !== ring[0][j]) {\n                throw new Error(\"First and last Position are not equivalent.\");\n            }\n        }\n    }\n    var geom = {\n        type: \"Polygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.polygon = polygon;\n/**\n * Creates a {@link Polygon} {@link FeatureCollection} from an Array of Polygon coordinates.\n *\n * @name polygons\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygon coordinates\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<Polygon>} Polygon FeatureCollection\n * @example\n * var polygons = turf.polygons([\n *   [[[-5, 52], [-4, 56], [-2, 51], [-7, 54], [-5, 52]]],\n *   [[[-15, 42], [-14, 46], [-12, 41], [-17, 44], [-15, 42]]],\n * ]);\n *\n * //=polygons\n */\nfunction polygons(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return polygon(coords, properties);\n    }), options);\n}\nexports.polygons = polygons;\n/**\n * Creates a {@link LineString} {@link Feature} from an Array of Positions.\n *\n * @name lineString\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<LineString>} LineString Feature\n * @example\n * var linestring1 = turf.lineString([[-24, 63], [-23, 60], [-25, 65], [-20, 69]], {name: 'line 1'});\n * var linestring2 = turf.lineString([[-14, 43], [-13, 40], [-15, 45], [-10, 49]], {name: 'line 2'});\n *\n * //=linestring1\n * //=linestring2\n */\nfunction lineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    if (coordinates.length < 2) {\n        throw new Error(\"coordinates must be an array of two or more positions\");\n    }\n    var geom = {\n        type: \"LineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.lineString = lineString;\n/**\n * Creates a {@link LineString} {@link FeatureCollection} from an Array of LineString coordinates.\n *\n * @name lineStrings\n * @param {Array<Array<Array<number>>>} coordinates an array of LinearRings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north]\n * associated with the FeatureCollection\n * @param {string|number} [options.id] Identifier associated with the FeatureCollection\n * @returns {FeatureCollection<LineString>} LineString FeatureCollection\n * @example\n * var linestrings = turf.lineStrings([\n *   [[-24, 63], [-23, 60], [-25, 65], [-20, 69]],\n *   [[-14, 43], [-13, 40], [-15, 45], [-10, 49]]\n * ]);\n *\n * //=linestrings\n */\nfunction lineStrings(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    return featureCollection(coordinates.map(function (coords) {\n        return lineString(coords, properties);\n    }), options);\n}\nexports.lineStrings = lineStrings;\n/**\n * Takes one or more {@link Feature|Features} and creates a {@link FeatureCollection}.\n *\n * @name featureCollection\n * @param {Feature[]} features input features\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {FeatureCollection} FeatureCollection of Features\n * @example\n * var locationA = turf.point([-75.343, 39.984], {name: 'Location A'});\n * var locationB = turf.point([-75.833, 39.284], {name: 'Location B'});\n * var locationC = turf.point([-75.534, 39.123], {name: 'Location C'});\n *\n * var collection = turf.featureCollection([\n *   locationA,\n *   locationB,\n *   locationC\n * ]);\n *\n * //=collection\n */\nfunction featureCollection(features, options) {\n    if (options === void 0) { options = {}; }\n    var fc = { type: \"FeatureCollection\" };\n    if (options.id) {\n        fc.id = options.id;\n    }\n    if (options.bbox) {\n        fc.bbox = options.bbox;\n    }\n    fc.features = features;\n    return fc;\n}\nexports.featureCollection = featureCollection;\n/**\n * Creates a {@link Feature<MultiLineString>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiLineString\n * @param {Array<Array<Array<number>>>} coordinates an array of LineStrings\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiLineString>} a MultiLineString feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiLine = turf.multiLineString([[[0,0],[10,10]]]);\n *\n * //=multiLine\n */\nfunction multiLineString(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiLineString\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiLineString = multiLineString;\n/**\n * Creates a {@link Feature<MultiPoint>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPoint\n * @param {Array<Array<number>>} coordinates an array of Positions\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPoint>} a MultiPoint feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPt = turf.multiPoint([[0,0],[10,10]]);\n *\n * //=multiPt\n */\nfunction multiPoint(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPoint\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPoint = multiPoint;\n/**\n * Creates a {@link Feature<MultiPolygon>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name multiPolygon\n * @param {Array<Array<Array<Array<number>>>>} coordinates an array of Polygons\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<MultiPolygon>} a multipolygon feature\n * @throws {Error} if no coordinates are passed\n * @example\n * var multiPoly = turf.multiPolygon([[[[0,0],[0,10],[10,10],[10,0],[0,0]]]]);\n *\n * //=multiPoly\n *\n */\nfunction multiPolygon(coordinates, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"MultiPolygon\",\n        coordinates: coordinates,\n    };\n    return feature(geom, properties, options);\n}\nexports.multiPolygon = multiPolygon;\n/**\n * Creates a {@link Feature<GeometryCollection>} based on a\n * coordinate array. Properties can be added optionally.\n *\n * @name geometryCollection\n * @param {Array<Geometry>} geometries an array of GeoJSON Geometries\n * @param {Object} [properties={}] an Object of key-value pairs to add as properties\n * @param {Object} [options={}] Optional Parameters\n * @param {Array<number>} [options.bbox] Bounding Box Array [west, south, east, north] associated with the Feature\n * @param {string|number} [options.id] Identifier associated with the Feature\n * @returns {Feature<GeometryCollection>} a GeoJSON GeometryCollection Feature\n * @example\n * var pt = turf.geometry(\"Point\", [100, 0]);\n * var line = turf.geometry(\"LineString\", [[101, 0], [102, 1]]);\n * var collection = turf.geometryCollection([pt, line]);\n *\n * // => collection\n */\nfunction geometryCollection(geometries, properties, options) {\n    if (options === void 0) { options = {}; }\n    var geom = {\n        type: \"GeometryCollection\",\n        geometries: geometries,\n    };\n    return feature(geom, properties, options);\n}\nexports.geometryCollection = geometryCollection;\n/**\n * Round number to precision\n *\n * @param {number} num Number\n * @param {number} [precision=0] Precision\n * @returns {number} rounded number\n * @example\n * turf.round(120.4321)\n * //=120\n *\n * turf.round(120.4321, 2)\n * //=120.43\n */\nfunction round(num, precision) {\n    if (precision === void 0) { precision = 0; }\n    if (precision && !(precision >= 0)) {\n        throw new Error(\"precision must be a positive number\");\n    }\n    var multiplier = Math.pow(10, precision || 0);\n    return Math.round(num * multiplier) / multiplier;\n}\nexports.round = round;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from radians to a more friendly unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name radiansToLength\n * @param {number} radians in radians across the sphere\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} distance\n */\nfunction radiansToLength(radians, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return radians * factor;\n}\nexports.radiansToLength = radiansToLength;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into radians\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @name lengthToRadians\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} radians\n */\nfunction lengthToRadians(distance, units) {\n    if (units === void 0) { units = \"kilometers\"; }\n    var factor = exports.factors[units];\n    if (!factor) {\n        throw new Error(units + \" units is invalid\");\n    }\n    return distance / factor;\n}\nexports.lengthToRadians = lengthToRadians;\n/**\n * Convert a distance measurement (assuming a spherical Earth) from a real-world unit into degrees\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, centimeters, kilometres, feet\n *\n * @name lengthToDegrees\n * @param {number} distance in real units\n * @param {string} [units=\"kilometers\"] can be degrees, radians, miles, or kilometers inches, yards, metres,\n * meters, kilometres, kilometers.\n * @returns {number} degrees\n */\nfunction lengthToDegrees(distance, units) {\n    return radiansToDegrees(lengthToRadians(distance, units));\n}\nexports.lengthToDegrees = lengthToDegrees;\n/**\n * Converts any bearing angle from the north line direction (positive clockwise)\n * and returns an angle between 0-360 degrees (positive clockwise), 0 being the north line\n *\n * @name bearingToAzimuth\n * @param {number} bearing angle, between -180 and +180 degrees\n * @returns {number} angle between 0 and 360 degrees\n */\nfunction bearingToAzimuth(bearing) {\n    var angle = bearing % 360;\n    if (angle < 0) {\n        angle += 360;\n    }\n    return angle;\n}\nexports.bearingToAzimuth = bearingToAzimuth;\n/**\n * Converts an angle in radians to degrees\n *\n * @name radiansToDegrees\n * @param {number} radians angle in radians\n * @returns {number} degrees between 0 and 360 degrees\n */\nfunction radiansToDegrees(radians) {\n    var degrees = radians % (2 * Math.PI);\n    return degrees * 180 / Math.PI;\n}\nexports.radiansToDegrees = radiansToDegrees;\n/**\n * Converts an angle in degrees to radians\n *\n * @name degreesToRadians\n * @param {number} degrees angle between 0 and 360 degrees\n * @returns {number} angle in radians\n */\nfunction degreesToRadians(degrees) {\n    var radians = degrees % 360;\n    return radians * Math.PI / 180;\n}\nexports.degreesToRadians = degreesToRadians;\n/**\n * Converts a length to the requested unit.\n * Valid units: miles, nauticalmiles, inches, yards, meters, metres, kilometers, centimeters, feet\n *\n * @param {number} length to be converted\n * @param {Units} [originalUnit=\"kilometers\"] of the length\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted length\n */\nfunction convertLength(length, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"kilometers\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(length >= 0)) {\n        throw new Error(\"length must be a positive number\");\n    }\n    return radiansToLength(lengthToRadians(length, originalUnit), finalUnit);\n}\nexports.convertLength = convertLength;\n/**\n * Converts a area to the requested unit.\n * Valid units: kilometers, kilometres, meters, metres, centimetres, millimeters, acres, miles, yards, feet, inches\n * @param {number} area to be converted\n * @param {Units} [originalUnit=\"meters\"] of the distance\n * @param {Units} [finalUnit=\"kilometers\"] returned unit\n * @returns {number} the converted distance\n */\nfunction convertArea(area, originalUnit, finalUnit) {\n    if (originalUnit === void 0) { originalUnit = \"meters\"; }\n    if (finalUnit === void 0) { finalUnit = \"kilometers\"; }\n    if (!(area >= 0)) {\n        throw new Error(\"area must be a positive number\");\n    }\n    var startFactor = exports.areaFactors[originalUnit];\n    if (!startFactor) {\n        throw new Error(\"invalid original units\");\n    }\n    var finalFactor = exports.areaFactors[finalUnit];\n    if (!finalFactor) {\n        throw new Error(\"invalid final units\");\n    }\n    return (area / startFactor) * finalFactor;\n}\nexports.convertArea = convertArea;\n/**\n * isNumber\n *\n * @param {*} num Number to validate\n * @returns {boolean} true/false\n * @example\n * turf.isNumber(123)\n * //=true\n * turf.isNumber('foo')\n * //=false\n */\nfunction isNumber(num) {\n    return !isNaN(num) && num !== null && !Array.isArray(num) && !/^\\s*$/.test(num);\n}\nexports.isNumber = isNumber;\n/**\n * isObject\n *\n * @param {*} input variable to validate\n * @returns {boolean} true/false\n * @example\n * turf.isObject({elevation: 10})\n * //=true\n * turf.isObject('foo')\n * //=false\n */\nfunction isObject(input) {\n    return (!!input) && (input.constructor === Object);\n}\nexports.isObject = isObject;\n/**\n * Validate BBox\n *\n * @private\n * @param {Array<number>} bbox BBox to validate\n * @returns {void}\n * @throws Error if BBox is not valid\n * @example\n * validateBBox([-180, -40, 110, 50])\n * //=OK\n * validateBBox([-180, -40])\n * //=Error\n * validateBBox('Foo')\n * //=Error\n * validateBBox(5)\n * //=Error\n * validateBBox(null)\n * //=Error\n * validateBBox(undefined)\n * //=Error\n */\nfunction validateBBox(bbox) {\n    if (!bbox) {\n        throw new Error(\"bbox is required\");\n    }\n    if (!Array.isArray(bbox)) {\n        throw new Error(\"bbox must be an Array\");\n    }\n    if (bbox.length !== 4 && bbox.length !== 6) {\n        throw new Error(\"bbox must be an Array of 4 or 6 numbers\");\n    }\n    bbox.forEach(function (num) {\n        if (!isNumber(num)) {\n            throw new Error(\"bbox must only contain numbers\");\n        }\n    });\n}\nexports.validateBBox = validateBBox;\n/**\n * Validate Id\n *\n * @private\n * @param {string|number} id Id to validate\n * @returns {void}\n * @throws Error if Id is not valid\n * @example\n * validateId([-180, -40, 110, 50])\n * //=Error\n * validateId([-180, -40])\n * //=Error\n * validateId('Foo')\n * //=OK\n * validateId(5)\n * //=OK\n * validateId(null)\n * //=Error\n * validateId(undefined)\n * //=Error\n */\nfunction validateId(id) {\n    if (!id) {\n        throw new Error(\"id is required\");\n    }\n    if ([\"string\", \"number\"].indexOf(typeof id) === -1) {\n        throw new Error(\"id must be a number or a string\");\n    }\n}\nexports.validateId = validateId;\n// Deprecated methods\nfunction radians2degrees() {\n    throw new Error(\"method has been renamed to `radiansToDegrees`\");\n}\nexports.radians2degrees = radians2degrees;\nfunction degrees2radians() {\n    throw new Error(\"method has been renamed to `degreesToRadians`\");\n}\nexports.degrees2radians = degrees2radians;\nfunction distanceToDegrees() {\n    throw new Error(\"method has been renamed to `lengthToDegrees`\");\n}\nexports.distanceToDegrees = distanceToDegrees;\nfunction distanceToRadians() {\n    throw new Error(\"method has been renamed to `lengthToRadians`\");\n}\nexports.distanceToRadians = distanceToRadians;\nfunction radiansToDistance() {\n    throw new Error(\"method has been renamed to `radiansToLength`\");\n}\nexports.radiansToDistance = radiansToDistance;\nfunction bearingToAngle() {\n    throw new Error(\"method has been renamed to `bearingToAzimuth`\");\n}\nexports.bearingToAngle = bearingToAngle;\nfunction convertDistance() {\n    throw new Error(\"method has been renamed to `convertLength`\");\n}\nexports.convertDistance = convertDistance;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@turf/helpers/index.js\n// module id = 5740\n// module chunks = 1 7","import React, {Component} from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Typography, Toolbar, Tooltip, IconButton } from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close'\r\n\r\nconst styles = theme => ({\r\n    content: {\r\n        paddingLeft: theme.spacing.unit * 3,\r\n        paddingRight: theme.spacing.unit * 3\r\n    }\r\n  });\r\n\r\n  class AttributeTableToolbar extends Component {\r\n    \r\n    render() {\r\n\r\n      const { classes, closeAttribTable } = this.props;\r\n  \r\n      return (\r\n        <Toolbar className={classes.content} disableGutters={true}>\r\n\r\n            <Typography variant=\"h5\"  noWrap>\r\n              Attribute Table\r\n            </Typography>\r\n      \r\n      <div style={{flex: 1}}></div>\r\n\r\n      <Tooltip title=\"Close Atribute Table\">\r\n      <div>\r\n        <IconButton onClick={closeAttribTable}>\r\n          <CloseIcon/>\r\n        </IconButton>\r\n        </div>\r\n      </Tooltip>\r\n      \r\n    </Toolbar>\r\n      );\r\n  \r\n  \r\n    }\r\n\r\n  }\r\n\r\nexport default withStyles(styles, { withTheme: true })(AttributeTableToolbar);\n\n\n// WEBPACK FOOTER //\n// ./src/components/AttributeTableContent/AttributeTableToolbar.js","import React, {Component} from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Table, TableBody, TableCell, Checkbox, TableRow, TablePagination } from '@material-ui/core';\r\nimport EnhancedTableHead from './EnhancedTableHead';\r\nimport SecondaryTableToolbar from './SecondaryTableToolbar';\r\n\r\nconst styles = theme => ({\r\n  \r\n  });\r\n\r\n  function desc(a, b, orderBy) {\r\n    if (b[orderBy] < a[orderBy]) {\r\n      return -1;\r\n    }\r\n    if (b[orderBy] > a[orderBy]) {\r\n      return 1;\r\n    }\r\n    return 0;\r\n  }\r\n  \r\n  function stableSort(array, cmp) {\r\n    const stabilizedThis = array.map((el, index) => [el, index]);\r\n    stabilizedThis.sort((a, b) => {\r\n      const order = cmp(a[0], b[0]);\r\n      if (order !== 0) return order;\r\n      return a[1] - b[1];\r\n    });\r\n    return stabilizedThis.map(el => el[0]);\r\n  }\r\n  \r\n  function getSorting(order, orderBy) {\r\n    return order === 'desc' ? (a, b) => desc(a, b, orderBy) : (a, b) => -desc(a, b, orderBy);\r\n  }\r\n\r\n  class AttributeTableTable extends Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        const {layers, layerId} = props;\r\n        let layer = layers.find(l => l.id === layerId);   \r\n\r\n        this.state = {\r\n            order: 'asc',\r\n            orderBy: 'id',\r\n            page: 0,\r\n            rowsPerPage: 5,\r\n            layer: layer\r\n          };\r\n      }\r\n    \r\n    handleChangePage = (event, page) => {\r\n    this.setState({ page });\r\n    };\r\n\r\n    handleChangeRowsPerPage = event => {\r\n    this.setState({ rowsPerPage: event.target.value });\r\n    };\r\n\r\n      handleRequestSort = (event, property) => {\r\n        const orderBy = property;\r\n        let order = 'desc';\r\n    \r\n        if (this.state.orderBy === property && this.state.order === 'desc') {\r\n          order = 'asc';\r\n        }\r\n    \r\n        this.setState({ order, orderBy });\r\n      };\r\n\r\n    isSelected = id => this.props.selected.indexOf(id) !== -1;\r\n    \r\n    getCells = (row) => {\r\n        return this.props.rowHeaders.map((header, index) => {\r\n            return <TableCell key={index} numeric={header.numeric} >{row[header.label]}</TableCell>\r\n        });\r\n    }\r\n    \r\n    render() {\r\n      const { classes, data, selected, rowHeaders, handleSelectAllClick, addAreaColumn, handleClick, displayFilter, handleNewLayerFromSelected, handleDeleteSelected } = this.props;\r\n      const { order, orderBy, rowsPerPage, page, layer } = this.state;\r\n      const emptyRows = rowsPerPage - Math.min(rowsPerPage, data.length - page * rowsPerPage);\r\n  \r\n      return (\r\n        <div>\r\n          <SecondaryTableToolbar addAreaColumn={addAreaColumn} handleNewLayerFromSelected={handleNewLayerFromSelected} handleDeleteSelected={handleDeleteSelected} displayFilter={displayFilter} numSelected={selected.length} layer={layer} />\r\n            <Table className={classes.table} aria-labelledby=\"tableTitle\">\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={this.handleRequestSort}\r\n              rowCount={data.length}\r\n              rowHeaders={rowHeaders}\r\n            />\r\n\r\n              <TableBody>\r\n              {stableSort(data, getSorting(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map(n => {\r\n                  const isSelected = this.isSelected(n.id);\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={event => handleClick(event, n.id)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isSelected}\r\n                      tabIndex={-1}\r\n                      key={n.id}\r\n                      selected={isSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox checked={isSelected} />\r\n                      </TableCell>\r\n                      {this.getCells(n)}\r\n \r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow style={{ height: 49 * emptyRows }}>\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n          <TablePagination\r\n          component=\"div\"\r\n          count={data.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          backIconButtonProps={{\r\n            'aria-label': 'Previous Page',\r\n          }}\r\n          nextIconButtonProps={{\r\n            'aria-label': 'Next Page',\r\n          }}\r\n          onChangePage={this.handleChangePage}\r\n          onChangeRowsPerPage={this.handleChangeRowsPerPage}\r\n        />\r\n        </div>\r\n      );\r\n  \r\n  \r\n    }\r\n\r\n  }\r\n\r\nexport default withStyles(styles, { withTheme: true })(AttributeTableTable);\n\n\n// WEBPACK FOOTER //\n// ./src/components/AttributeTableContent/AttributeTableTable.js","import React, {Component} from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { TableHead, TableRow, TableCell, Checkbox, Tooltip, TableSortLabel } from \"@material-ui/core\";\r\n\r\nconst styles = theme => ({\r\n  head: {\r\n    backgroundColor: theme.palette.primary.dark,\r\n  }\r\n  \r\n});\r\n\r\n/**\r\n * The top row of the Attribute Table\r\n */\r\n\r\nclass EnhancedTableHead extends Component {\r\n\r\n  createSortHandler = property => event => {\r\n    this.props.onRequestSort(event, property);\r\n  };\r\n\r\n  render() {\r\n    const {onSelectAllClick, order, orderBy, numSelected, rowCount, rowHeaders, classes } = this.props;\r\n\r\n    return (\r\n      <TableHead className={classes.head}>\r\n        <TableRow>\r\n          <TableCell padding=\"checkbox\">\r\n            <Checkbox\r\n              indeterminate={numSelected > 0 && numSelected < rowCount}\r\n              checked={numSelected === rowCount}\r\n              onChange={onSelectAllClick}\r\n            />\r\n          </TableCell>\r\n          \r\n          {rowHeaders.map(row => {\r\n            return (\r\n              <TableCell\r\n                key={row.label}\r\n                numeric={row.numeric}\r\n                padding={row.disablePadding ? 'none' : 'default'}\r\n                sortDirection={orderBy === row.label ? order : false}\r\n              >\r\n                <Tooltip\r\n                  title=\"Sort\"\r\n                  placement={row.numeric ? 'bottom-end' : 'bottom-start'}\r\n                  enterDelay={300}\r\n                >\r\n                  <TableSortLabel\r\n                    active={orderBy === row.label}\r\n                    direction={order}\r\n                    onClick={this.createSortHandler(row.label)}\r\n                  >\r\n                    {row.label}\r\n                  </TableSortLabel>\r\n                </Tooltip>\r\n              </TableCell>\r\n            );\r\n          }, this)}\r\n        </TableRow>\r\n      </TableHead>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(EnhancedTableHead);\n\n\n// WEBPACK FOOTER //\n// ./src/components/AttributeTableContent/EnhancedTableHead.js","import React, {Component} from 'react';\r\nimport classNames from 'classnames';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Toolbar, Typography, Tooltip, IconButton } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport NewLayerIcon from '@material-ui/icons/InsertDriveFile';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport MeasureIcon from '@material-ui/icons/Straighten';\r\nimport { lighten } from '@material-ui/core/styles/colorManipulator';\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n        paddingRight: theme.spacing.unit,\r\n      },\r\n      highlight:\r\n        theme.palette.type === 'light'\r\n          ? {\r\n              color: theme.palette.secondary.main,\r\n              backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n            }\r\n          : {\r\n              color: theme.palette.text.primary,\r\n              backgroundColor: theme.palette.secondary.dark,\r\n            },\r\n      spacer: {\r\n        flex: '1 1 100%',\r\n      },\r\n      actions: {\r\n        color: theme.palette.text.secondary,\r\n      },\r\n      title: {\r\n        flex: '0 0 auto',\r\n      },\r\n      actionDiv: {\r\n        display: 'inline-flex'\r\n      }\r\n  });\r\n\r\n  /**\r\n   * displayed above the table. gives user ability to press filter button. Or if some features are selected\r\n   * it will show how many features are selected and give choices to delete selection or create a new layer \r\n   * from selection.\r\n   */\r\n\r\n  class SecondaryTableToolbar extends Component {\r\n    \r\n    render() {\r\n\r\n        const { displayFilter, numSelected, classes, layer, addAreaColumn, handleDeleteSelected, handleNewLayerFromSelected } = this.props;\r\n        return (\r\n            <Toolbar\r\n            className={classNames(classes.root, {\r\n                [classes.highlight]: numSelected > 0,\r\n            })}\r\n            >\r\n            <div className={classes.title}>\r\n                {numSelected > 0 ? (\r\n                <Typography color=\"inherit\" variant=\"subtitle1\">\r\n                    {numSelected} selected\r\n                </Typography>\r\n                ) : (\r\n                <Typography variant=\"h6\" id=\"tableTitle\">\r\n                    {layer.displayName}\r\n                </Typography>\r\n                )}\r\n            </div>\r\n            <div className={classes.spacer} />\r\n            <div className={classes.actions}>\r\n                {numSelected > 0 ? (\r\n                <div className={classes.actionDiv}>\r\n                <Tooltip title=\"New Layer From Selection\">\r\n                    <IconButton aria-label=\"New\" onClick={handleNewLayerFromSelected}>\r\n                        <NewLayerIcon/>\r\n                    </IconButton>\r\n                </Tooltip>\r\n                <Tooltip title=\"Delete Selection\">\r\n                    <IconButton aria-label=\"Delete\" onClick={handleDeleteSelected}>\r\n                        <DeleteIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                </div>\r\n                ) : (\r\n                <div className={classes.actionDiv}>\r\n                {(layer.type === 'Polygon' || layer.type === 'MultiPolygon') ? \r\n                <Tooltip title=\"Calculate Area\">\r\n                    <IconButton aria-label=\"calculate\" onClick={addAreaColumn}>\r\n                        <MeasureIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                : null\r\n                }\r\n                <Tooltip title=\"Filter list\">\r\n                    <IconButton aria-label=\"Filter list\" onClick={displayFilter}>\r\n                    <FilterListIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n                \r\n                </div>\r\n                )}\r\n            </div>\r\n            </Toolbar>\r\n        ); \r\n    }\r\n  }\r\n\r\nexport default withStyles(styles, { withTheme: true })(SecondaryTableToolbar);\n\n\n// WEBPACK FOOTER //\n// ./src/components/AttributeTableContent/SecondaryTableToolbar.js","import React, {Component} from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Typography, Tooltip, IconButton, Toolbar} from '@material-ui/core';\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport FilterChip from './FilterChip';\r\n\r\n/**\r\n * Container for all the filterChips (containing the filter sentences)\r\n */\r\n\r\nconst styles = theme => ({\r\n    spacer: {\r\n        flex: '1 1 100%',\r\n      },\r\n      actions: {\r\n        color: theme.palette.text.secondary,\r\n      },\r\n      title: {\r\n        flex: '0 0 auto',\r\n      },\r\n      chip: {\r\n        margin: theme.spacing.unit,\r\n      },\r\n      button: {\r\n        margin: theme.spacing.unit,\r\n        minWidth: 0\r\n      }\r\n  });\r\n\r\n  class FilterChipContainer extends Component {\r\n    \r\n    render() {\r\n\r\n      const { classes, filterSentences, addNewFilter, deleteFilterSentence, removeAllFilters, rowHeaders  } = this.props;\r\n\r\n      return (\r\n        <div>\r\n            <Toolbar className={classes.root}>\r\n            <div className={classes.title}>\r\n                <Typography variant=\"h6\">\r\n                    Filter Attributes\r\n                </Typography>\r\n            </div>\r\n            <div className={classes.spacer} />\r\n            <div className={classes.actions}>\r\n                <Tooltip title=\"Remove Filters\">\r\n                    <IconButton aria-label=\"Close\" onClick={removeAllFilters}>\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                </Tooltip>\r\n            </div>\r\n            </Toolbar>\r\n            \r\n            <FilterChip\r\n                label={'wip'}\r\n                submitFilter={addNewFilter}\r\n                rowHeaders={rowHeaders}\r\n            />\r\n   \r\n\r\n            {\r\n                filterSentences.map( (filter, i) => {                    \r\n                    let s = filter.attrib + ' ' + filter.operator + ' ' + filter.val;\r\n                    return (\r\n                        <FilterChip\r\n                        key={i}\r\n                        label={s}\r\n                        sentence={s}\r\n                        index={i}\r\n                        deleteSentence={deleteFilterSentence}\r\n                    />\r\n                    );      \r\n\r\n                })\r\n            }\r\n        </div>\r\n      );\r\n  \r\n  \r\n    }\r\n\r\n  }\r\n\r\nexport default withStyles(styles, { withTheme: true })(FilterChipContainer);\n\n\n// WEBPACK FOOTER //\n// ./src/components/AttributeTableContent/FilterChipContainer.js","import React, {Component} from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport {ListItemText,\r\n  ListItemSecondaryAction,\r\n  ListItem,\r\n  IconButton,\r\n  Select,\r\n  Input,\r\n  MenuItem,\r\n  TextField\r\n} from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\n\r\nconst numericOperators = ['>', '>=', '<', '<=', '==', '!=']\r\nconst stringOperators = ['equals', 'includes', 'startsWith']\r\n\r\nconst styles = theme => ({\r\n    mainDiv: {\r\n        borderRadius: 2,\r\n        margin: theme.spacing.unit,\r\n        listStyle: 'none',\r\n        backgroundColor: theme.palette.action.hover\r\n    },\r\n    select: {\r\n      marginRight: theme.spacing.unit,\r\n      marginTop: 0,\r\n      marginBottom: 0,\r\n      minWidth: 80\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Filter chip contains a single filter sentence. If it has label 'wip', this meens that the sentence is\r\n   * currently being constructed. Otherwise it is a completed sentence.\r\n   */\r\n\r\n  class FilterChip extends Component {\r\n    constructor(props) {\r\n      super(props)\r\n\r\n      this.keyupHandler = this.keyupHandler.bind(this);\r\n\r\n      this.state = {\r\n          attrib: '',\r\n          operator: '',\r\n          val: ''\r\n        };\r\n    }\r\n  \r\n    componentDidMount() {\r\n      document.addEventListener('keyup', this.keyupHandler, false);\r\n    }\r\n    componentWillUnmount() {\r\n      document.removeEventListener('keyup', this.keyupHandler, false);\r\n    }\r\n\r\n    keyupHandler(e) {\r\n      if(e.keyCode === 13) {\r\n        this.submitFilter();\r\n      }\r\n    }\r\n\r\n    handleChange = name => event => {\r\n      const {isNumeric} = this.state\r\n      const {rowHeaders} = this.props;\r\n      let value = event.target.value;\r\n      \r\n      if ( name === 'attrib') {\r\n        this.setState({isNumeric: rowHeaders.find(rh => rh.label === value).numeric });\r\n      }\r\n\r\n      if (name === 'val') {\r\n        \r\n        if( isNumeric  ) {\r\n          if (isNaN(Number(value))) {\r\n            this.setState({TextFieldError: true});\r\n          } else if (value !== '') {\r\n            value = Number(value) ;\r\n            this.setState({TextFieldError: false})\r\n          }\r\n        }\r\n      }\r\n\r\n      this.setState({ [name]: value});\r\n    };\r\n\r\n    submitFilter = () => {\r\n      const { attrib, operator, val, isNumeric} = this.state;\r\n\r\n      if( attrib && operator && val){\r\n        this.setState({\r\n          attrib: '',\r\n          operator: '',\r\n          val: ''\r\n        });\r\n        this.props.submitFilter({ attrib: attrib, operator:operator, val: val, isNumeric: isNumeric});\r\n      }\r\n      \r\n    }\r\n    \r\n    render() {\r\n\r\n      const { classes, sentence, index, deleteSentence, label, rowHeaders } = this.props;\r\n      const {attrib, operator, val, isNumeric, TextFieldError} = this.state;\r\n\r\n      let operatorList = isNumeric ? numericOperators : stringOperators;\r\n      let errorText = TextFieldError ? 'Input must be a number': '';\r\n      let hasError = TextFieldError || !attrib || !operator || val.length === 0\r\n  \r\n      return (\r\n        <div className={classes.mainDiv}>\r\n            { label ==='wip' ?\r\n            <ListItem button style={{padding:5}}>\r\n                <ListItemText>\r\n                <Select\r\n                  className={classes.select}\r\n                  label=\"Attribute\"\r\n                  value={attrib}\r\n                  placeholder=\"Attribute\"\r\n                  onChange={this.handleChange('attrib')}\r\n                  input={<Input name=\"name\" id=\"attrib-disabled\" />}\r\n                >\r\n\r\n                {rowHeaders.map( (attrib, i) => {\r\n                  return(<MenuItem key={i} value={attrib.label}>{attrib.label}</MenuItem>                \r\n                  );\r\n                })}\r\n                </Select>\r\n                <Select\r\n                  className={classes.select}\r\n                  disabled={attrib.length < 1}\r\n                  value={operator}\r\n                  placeholder=\"Operator\"\r\n                  onChange={this.handleChange('operator')}\r\n                  input={<Input name=\"operator\" id=\"operator\" />}\r\n                >\r\n\r\n                {operatorList.map( (operator, i) => {\r\n                  return(<MenuItem key={i} value={operator}>{operator}</MenuItem>                \r\n                  );\r\n                })}\r\n                </Select>\r\n                <TextField\r\n                  className={classes.select}\r\n                  value={val}\r\n                  disabled={attrib.length < 1}\r\n                  onChange={this.handleChange('val')}\r\n                  margin=\"normal\"\r\n                  error={TextFieldError}\r\n                  helperText={errorText}\r\n                />\r\n\r\n                </ListItemText>\r\n                \r\n                <ListItemSecondaryAction>\r\n                      <IconButton aria-label=\"Add\" disabled={hasError} onClick={() => this.submitFilter()}>\r\n                        <DoneIcon color='primary'/>\r\n                      </IconButton>\r\n                  </ListItemSecondaryAction>\r\n                  \r\n            </ListItem>\r\n            :\r\n            <ListItem button style={{padding:5}}>\r\n                <ListItemText secondary={sentence}/>\r\n                <ListItemSecondaryAction>\r\n                      <IconButton aria-label=\"Delete\" onClick={() => deleteSentence(index)}>\r\n                        <DeleteIcon/>\r\n                      </IconButton>\r\n                    </ListItemSecondaryAction>\r\n            </ListItem>}\r\n        </div>\r\n      );\r\n  \r\n  \r\n    }\r\n\r\n  }\r\n\r\nexport default withStyles(styles, { withTheme: true })(FilterChip);\n\n\n// WEBPACK FOOTER //\n// ./src/components/AttributeTableContent/FilterChip.js","import area from '@turf/area';\r\n\r\n/**\r\n * Adds an Area property to each feature of a polygon featureCollection\r\n */\r\n\r\nconst areaOfPolygons = (geojson) => {\r\n\r\n    geojson.features.forEach(f => {\r\n        f.properties['Area_(m^2)'] = area(f);\r\n    })\r\n\r\n   \r\n  return geojson;\r\n\r\n}\r\n  export default areaOfPolygons\n\n\n// WEBPACK FOOTER //\n// ./src/utils/geoprocessing/areaOfPolygons.js","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar meta_1 = require(\"@turf/meta\");\n// Note: change RADIUS => earthRadius\nvar RADIUS = 6378137;\n/**\n * Takes one or more features and returns their area in square meters.\n *\n * @name area\n * @param {GeoJSON} geojson input GeoJSON feature(s)\n * @returns {number} area in square meters\n * @example\n * var polygon = turf.polygon([[[125, -15], [113, -22], [154, -27], [144, -15], [125, -15]]]);\n *\n * var area = turf.area(polygon);\n *\n * //addToMap\n * var addToMap = [polygon]\n * polygon.properties.area = area\n */\nfunction area(geojson) {\n    return meta_1.geomReduce(geojson, function (value, geom) {\n        return value + calculateArea(geom);\n    }, 0);\n}\nexports.default = area;\n/**\n * Calculate Area\n *\n * @private\n * @param {Geometry} geom GeoJSON Geometries\n * @returns {number} area\n */\nfunction calculateArea(geom) {\n    var total = 0;\n    var i;\n    switch (geom.type) {\n        case \"Polygon\":\n            return polygonArea(geom.coordinates);\n        case \"MultiPolygon\":\n            for (i = 0; i < geom.coordinates.length; i++) {\n                total += polygonArea(geom.coordinates[i]);\n            }\n            return total;\n        case \"Point\":\n        case \"MultiPoint\":\n        case \"LineString\":\n        case \"MultiLineString\":\n            return 0;\n    }\n    return 0;\n}\nfunction polygonArea(coords) {\n    var total = 0;\n    if (coords && coords.length > 0) {\n        total += Math.abs(ringArea(coords[0]));\n        for (var i = 1; i < coords.length; i++) {\n            total -= Math.abs(ringArea(coords[i]));\n        }\n    }\n    return total;\n}\n/**\n * @private\n * Calculate the approximate area of the polygon were it projected onto the earth.\n * Note that this area will be positive if ring is oriented clockwise, otherwise it will be negative.\n *\n * Reference:\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for Polygons on a Sphere\",\n * JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007 http://trs-new.jpl.nasa.gov/dspace/handle/2014/40409\n *\n * @param {Array<Array<number>>} coords Ring Coordinates\n * @returns {number} The approximate signed geodesic area of the polygon in square meters.\n */\nfunction ringArea(coords) {\n    var p1;\n    var p2;\n    var p3;\n    var lowerIndex;\n    var middleIndex;\n    var upperIndex;\n    var i;\n    var total = 0;\n    var coordsLength = coords.length;\n    if (coordsLength > 2) {\n        for (i = 0; i < coordsLength; i++) {\n            if (i === coordsLength - 2) {\n                lowerIndex = coordsLength - 2;\n                middleIndex = coordsLength - 1;\n                upperIndex = 0;\n            }\n            else if (i === coordsLength - 1) {\n                lowerIndex = coordsLength - 1;\n                middleIndex = 0;\n                upperIndex = 1;\n            }\n            else {\n                lowerIndex = i;\n                middleIndex = i + 1;\n                upperIndex = i + 2;\n            }\n            p1 = coords[lowerIndex];\n            p2 = coords[middleIndex];\n            p3 = coords[upperIndex];\n            total += (rad(p3[0]) - rad(p1[0])) * Math.sin(rad(p2[1]));\n        }\n        total = total * RADIUS * RADIUS / 2;\n    }\n    return total;\n}\nfunction rad(num) {\n    return num * Math.PI / 180;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@turf/area/index.js\n// module id = 6362\n// module chunks = 1","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar helpers = require('@turf/helpers');\n\n/**\n * Callback for coordEach\n *\n * @callback coordEachCallback\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Iterate over coordinates in any GeoJSON object, similar to Array.forEach()\n *\n * @name coordEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentCoord, coordIndex, featureIndex, multiFeatureIndex)\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordEach(features, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction coordEach(geojson, callback, excludeWrapCoord) {\n    // Handles null Geometry -- Skips this GeoJSON\n    if (geojson === null) return;\n    var j, k, l, geometry, stopG, coords,\n        geometryMaybeCollection,\n        wrapShrink = 0,\n        coordIndex = 0,\n        isGeometryCollection,\n        type = geojson.type,\n        isFeatureCollection = type === 'FeatureCollection',\n        isFeature = type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (var featureIndex = 0; featureIndex < stop; featureIndex++) {\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[featureIndex].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (var geomIndex = 0; geomIndex < stopG; geomIndex++) {\n            var multiFeatureIndex = 0;\n            var geometryIndex = 0;\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[geomIndex] : geometryMaybeCollection;\n\n            // Handles null Geometry -- Skips this geometry\n            if (geometry === null) continue;\n            coords = geometry.coordinates;\n            var geomType = geometry.type;\n\n            wrapShrink = (excludeWrapCoord && (geomType === 'Polygon' || geomType === 'MultiPolygon')) ? 1 : 0;\n\n            switch (geomType) {\n            case null:\n                break;\n            case 'Point':\n                if (callback(coords, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                coordIndex++;\n                multiFeatureIndex++;\n                break;\n            case 'LineString':\n            case 'MultiPoint':\n                for (j = 0; j < coords.length; j++) {\n                    if (callback(coords[j], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                    coordIndex++;\n                    if (geomType === 'MultiPoint') multiFeatureIndex++;\n                }\n                if (geomType === 'LineString') multiFeatureIndex++;\n                break;\n            case 'Polygon':\n            case 'MultiLineString':\n                for (j = 0; j < coords.length; j++) {\n                    for (k = 0; k < coords[j].length - wrapShrink; k++) {\n                        if (callback(coords[j][k], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                        coordIndex++;\n                    }\n                    if (geomType === 'MultiLineString') multiFeatureIndex++;\n                    if (geomType === 'Polygon') geometryIndex++;\n                }\n                if (geomType === 'Polygon') multiFeatureIndex++;\n                break;\n            case 'MultiPolygon':\n                for (j = 0; j < coords.length; j++) {\n                    geometryIndex = 0;\n                    for (k = 0; k < coords[j].length; k++) {\n                        for (l = 0; l < coords[j][k].length - wrapShrink; l++) {\n                            if (callback(coords[j][k][l], coordIndex, featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n                            coordIndex++;\n                        }\n                        geometryIndex++;\n                    }\n                    multiFeatureIndex++;\n                }\n                break;\n            case 'GeometryCollection':\n                for (j = 0; j < geometry.geometries.length; j++)\n                    if (coordEach(geometry.geometries[j], callback, excludeWrapCoord) === false) return false;\n                break;\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n    }\n}\n\n/**\n * Callback for coordReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback coordReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Array<number>} currentCoord The current coordinate being processed.\n * @param {number} coordIndex The current index of the coordinate being processed.\n * Starts at index 0, if an initialValue is provided, and at index 1 otherwise.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n */\n\n/**\n * Reduce coordinates in any GeoJSON object, similar to Array.reduce()\n *\n * @name coordReduce\n * @param {FeatureCollection|Geometry|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentCoord, coordIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @param {boolean} [excludeWrapCoord=false] whether or not to include the final coordinate of LinearRings that wraps the ring in its iteration.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.coordReduce(features, function (previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentCoord\n *   //=coordIndex\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentCoord;\n * });\n */\nfunction coordReduce(geojson, callback, initialValue, excludeWrapCoord) {\n    var previousValue = initialValue;\n    coordEach(geojson, function (currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (coordIndex === 0 && initialValue === undefined) previousValue = currentCoord;\n        else previousValue = callback(previousValue, currentCoord, coordIndex, featureIndex, multiFeatureIndex, geometryIndex);\n    }, excludeWrapCoord);\n    return previousValue;\n}\n\n/**\n * Callback for propEach\n *\n * @callback propEachCallback\n * @param {Object} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over properties in any GeoJSON object, similar to Array.forEach()\n *\n * @name propEach\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentProperties, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propEach(features, function (currentProperties, featureIndex) {\n *   //=currentProperties\n *   //=featureIndex\n * });\n */\nfunction propEach(geojson, callback) {\n    var i;\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        for (i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i].properties, i) === false) break;\n        }\n        break;\n    case 'Feature':\n        callback(geojson.properties, 0);\n        break;\n    }\n}\n\n\n/**\n * Callback for propReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback propReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {*} currentProperties The current Properties being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce properties in any GeoJSON object into a single value,\n * similar to how Array.reduce works. However, in this case we lazily run\n * the reduction, so an array of all properties is unnecessary.\n *\n * @name propReduce\n * @param {FeatureCollection|Feature} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentProperties, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.propReduce(features, function (previousValue, currentProperties, featureIndex) {\n *   //=previousValue\n *   //=currentProperties\n *   //=featureIndex\n *   return currentProperties\n * });\n */\nfunction propReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    propEach(geojson, function (currentProperties, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentProperties;\n        else previousValue = callback(previousValue, currentProperties, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for featureEach\n *\n * @callback featureEachCallback\n * @param {Feature<any>} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Iterate over features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name featureEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.featureEach(features, function (currentFeature, featureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n * });\n */\nfunction featureEach(geojson, callback) {\n    if (geojson.type === 'Feature') {\n        callback(geojson, 0);\n    } else if (geojson.type === 'FeatureCollection') {\n        for (var i = 0; i < geojson.features.length; i++) {\n            if (callback(geojson.features[i], i) === false) break;\n        }\n    }\n}\n\n/**\n * Callback for featureReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback featureReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name featureReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {\"foo\": \"bar\"}),\n *   turf.point([36, 53], {\"hello\": \"world\"})\n * ]);\n *\n * turf.featureReduce(features, function (previousValue, currentFeature, featureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   return currentFeature\n * });\n */\nfunction featureReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    featureEach(geojson, function (currentFeature, featureIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Get all coordinates from any GeoJSON object.\n *\n * @name coordAll\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @returns {Array<Array<number>>} coordinate position array\n * @example\n * var features = turf.featureCollection([\n *   turf.point([26, 37], {foo: 'bar'}),\n *   turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * var coords = turf.coordAll(features);\n * //= [[26, 37], [36, 53]]\n */\nfunction coordAll(geojson) {\n    var coords = [];\n    coordEach(geojson, function (coord) {\n        coords.push(coord);\n    });\n    return coords;\n}\n\n/**\n * Callback for geomEach\n *\n * @callback geomEachCallback\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Iterate over each geometry in any GeoJSON object, similar to Array.forEach()\n *\n * @name geomEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @returns {void}\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomEach(features, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n * });\n */\nfunction geomEach(geojson, callback) {\n    var i, j, g, geometry, stopG,\n        geometryMaybeCollection,\n        isGeometryCollection,\n        featureProperties,\n        featureBBox,\n        featureId,\n        featureIndex = 0,\n        isFeatureCollection = geojson.type === 'FeatureCollection',\n        isFeature = geojson.type === 'Feature',\n        stop = isFeatureCollection ? geojson.features.length : 1;\n\n    // This logic may look a little weird. The reason why it is that way\n    // is because it's trying to be fast. GeoJSON supports multiple kinds\n    // of objects at its root: FeatureCollection, Features, Geometries.\n    // This function has the responsibility of handling all of them, and that\n    // means that some of the `for` loops you see below actually just don't apply\n    // to certain inputs. For instance, if you give this just a\n    // Point geometry, then both loops are short-circuited and all we do\n    // is gradually rename the input until it's called 'geometry'.\n    //\n    // This also aims to allocate as few resources as possible: just a\n    // few numbers and booleans, rather than any temporary arrays as would\n    // be required with the normalization approach.\n    for (i = 0; i < stop; i++) {\n\n        geometryMaybeCollection = (isFeatureCollection ? geojson.features[i].geometry :\n            (isFeature ? geojson.geometry : geojson));\n        featureProperties = (isFeatureCollection ? geojson.features[i].properties :\n            (isFeature ? geojson.properties : {}));\n        featureBBox = (isFeatureCollection ? geojson.features[i].bbox :\n            (isFeature ? geojson.bbox : undefined));\n        featureId = (isFeatureCollection ? geojson.features[i].id :\n            (isFeature ? geojson.id : undefined));\n        isGeometryCollection = (geometryMaybeCollection) ? geometryMaybeCollection.type === 'GeometryCollection' : false;\n        stopG = isGeometryCollection ? geometryMaybeCollection.geometries.length : 1;\n\n        for (g = 0; g < stopG; g++) {\n            geometry = isGeometryCollection ?\n                geometryMaybeCollection.geometries[g] : geometryMaybeCollection;\n\n            // Handle null Geometry\n            if (geometry === null) {\n                if (callback(null, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                continue;\n            }\n            switch (geometry.type) {\n            case 'Point':\n            case 'LineString':\n            case 'MultiPoint':\n            case 'Polygon':\n            case 'MultiLineString':\n            case 'MultiPolygon': {\n                if (callback(geometry, featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                break;\n            }\n            case 'GeometryCollection': {\n                for (j = 0; j < geometry.geometries.length; j++) {\n                    if (callback(geometry.geometries[j], featureIndex, featureProperties, featureBBox, featureId) === false) return false;\n                }\n                break;\n            }\n            default:\n                throw new Error('Unknown Geometry Type');\n            }\n        }\n        // Only increase `featureIndex` per each feature\n        featureIndex++;\n    }\n}\n\n/**\n * Callback for geomReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback geomReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Geometry} currentGeometry The current Geometry being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {Object} featureProperties The current Feature Properties being processed.\n * @param {Array<number>} featureBBox The current Feature BBox being processed.\n * @param {number|string} featureId The current Feature Id being processed.\n */\n\n/**\n * Reduce geometry in any GeoJSON object, similar to Array.reduce().\n *\n * @name geomReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.point([36, 53], {hello: 'world'})\n * ]);\n *\n * turf.geomReduce(features, function (previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n *   //=previousValue\n *   //=currentGeometry\n *   //=featureIndex\n *   //=featureProperties\n *   //=featureBBox\n *   //=featureId\n *   return currentGeometry\n * });\n */\nfunction geomReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    geomEach(geojson, function (currentGeometry, featureIndex, featureProperties, featureBBox, featureId) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentGeometry;\n        else previousValue = callback(previousValue, currentGeometry, featureIndex, featureProperties, featureBBox, featureId);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for flattenEach\n *\n * @callback flattenEachCallback\n * @param {Feature} currentFeature The current flattened feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Iterate over flattened features in any GeoJSON object, similar to\n * Array.forEach.\n *\n * @name flattenEach\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (currentFeature, featureIndex, multiFeatureIndex)\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenEach(features, function (currentFeature, featureIndex, multiFeatureIndex) {\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n * });\n */\nfunction flattenEach(geojson, callback) {\n    geomEach(geojson, function (geometry, featureIndex, properties, bbox, id) {\n        // Callback for single geometry\n        var type = (geometry === null) ? null : geometry.type;\n        switch (type) {\n        case null:\n        case 'Point':\n        case 'LineString':\n        case 'Polygon':\n            if (callback(helpers.feature(geometry, properties, {bbox: bbox, id: id}), featureIndex, 0) === false) return false;\n            return;\n        }\n\n        var geomType;\n\n        // Callback for multi-geometry\n        switch (type) {\n        case 'MultiPoint':\n            geomType = 'Point';\n            break;\n        case 'MultiLineString':\n            geomType = 'LineString';\n            break;\n        case 'MultiPolygon':\n            geomType = 'Polygon';\n            break;\n        }\n\n        for (var multiFeatureIndex = 0; multiFeatureIndex < geometry.coordinates.length; multiFeatureIndex++) {\n            var coordinate = geometry.coordinates[multiFeatureIndex];\n            var geom = {\n                type: geomType,\n                coordinates: coordinate\n            };\n            if (callback(helpers.feature(geom, properties), featureIndex, multiFeatureIndex) === false) return false;\n        }\n    });\n}\n\n/**\n * Callback for flattenReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback flattenReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature} currentFeature The current Feature being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n */\n\n/**\n * Reduce flattened features in any GeoJSON object, similar to Array.reduce().\n *\n * @name flattenReduce\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON object\n * @param {Function} callback a method that takes (previousValue, currentFeature, featureIndex, multiFeatureIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var features = turf.featureCollection([\n *     turf.point([26, 37], {foo: 'bar'}),\n *     turf.multiPoint([[40, 30], [36, 53]], {hello: 'world'})\n * ]);\n *\n * turf.flattenReduce(features, function (previousValue, currentFeature, featureIndex, multiFeatureIndex) {\n *   //=previousValue\n *   //=currentFeature\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   return currentFeature\n * });\n */\nfunction flattenReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    flattenEach(geojson, function (currentFeature, featureIndex, multiFeatureIndex) {\n        if (featureIndex === 0 && multiFeatureIndex === 0 && initialValue === undefined) previousValue = currentFeature;\n        else previousValue = callback(previousValue, currentFeature, featureIndex, multiFeatureIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Callback for segmentEach\n *\n * @callback segmentEachCallback\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n * @returns {void}\n */\n\n/**\n * Iterate over 2-vertex line segment in any GeoJSON object, similar to Array.forEach()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex)\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentEach(polygon, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //=currentSegment\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   //=segmentIndex\n * });\n *\n * // Calculate the total number of segments\n * var total = 0;\n * turf.segmentEach(polygon, function () {\n *     total++;\n * });\n */\nfunction segmentEach(geojson, callback) {\n    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n        var segmentIndex = 0;\n\n        // Exclude null Geometries\n        if (!feature.geometry) return;\n        // (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n        var type = feature.geometry.type;\n        if (type === 'Point' || type === 'MultiPoint') return;\n\n        // Generate 2-vertex line segments\n        var previousCoords;\n        var previousFeatureIndex = 0;\n        var previousMultiIndex = 0;\n        var prevGeomIndex = 0;\n        if (coordEach(feature, function (currentCoord, coordIndex, featureIndexCoord, multiPartIndexCoord, geometryIndex) {\n            // Simulating a meta.coordReduce() since `reduce` operations cannot be stopped by returning `false`\n            if (previousCoords === undefined || featureIndex > previousFeatureIndex || multiPartIndexCoord > previousMultiIndex || geometryIndex > prevGeomIndex) {\n                previousCoords = currentCoord;\n                previousFeatureIndex = featureIndex;\n                previousMultiIndex = multiPartIndexCoord;\n                prevGeomIndex = geometryIndex;\n                segmentIndex = 0;\n                return;\n            }\n            var currentSegment = helpers.lineString([previousCoords, currentCoord], feature.properties);\n            if (callback(currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) === false) return false;\n            segmentIndex++;\n            previousCoords = currentCoord;\n        }) === false) return false;\n    });\n}\n\n/**\n * Callback for segmentReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback segmentReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentSegment The current Segment being processed.\n * @param {number} featureIndex The current index of the Feature being processed.\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed.\n * @param {number} geometryIndex The current index of the Geometry being processed.\n * @param {number} segmentIndex The current index of the Segment being processed.\n */\n\n/**\n * Reduce 2-vertex line segment in any GeoJSON object, similar to Array.reduce()\n * (Multi)Point geometries do not contain segments therefore they are ignored during this operation.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson any GeoJSON\n * @param {Function} callback a method that takes (previousValue, currentSegment, currentIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {void}\n * @example\n * var polygon = turf.polygon([[[-50, 5], [-40, -10], [-50, -10], [-40, 5], [-50, 5]]]);\n *\n * // Iterate over GeoJSON by 2-vertex segments\n * turf.segmentReduce(polygon, function (previousSegment, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n *   //= previousSegment\n *   //= currentSegment\n *   //= featureIndex\n *   //= multiFeatureIndex\n *   //= geometryIndex\n *   //= segmentInex\n *   return currentSegment\n * });\n *\n * // Calculate the total number of segments\n * var initialValue = 0\n * var total = turf.segmentReduce(polygon, function (previousValue) {\n *     previousValue++;\n *     return previousValue;\n * }, initialValue);\n */\nfunction segmentReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    var started = false;\n    segmentEach(geojson, function (currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex) {\n        if (started === false && initialValue === undefined) previousValue = currentSegment;\n        else previousValue = callback(previousValue, currentSegment, featureIndex, multiFeatureIndex, geometryIndex, segmentIndex);\n        started = true;\n    });\n    return previousValue;\n}\n\n/**\n * Callback for lineEach\n *\n * @callback lineEachCallback\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Iterate over line or ring coordinates in LineString, Polygon, MultiLineString, MultiPolygon Features or Geometries,\n * similar to Array.forEach.\n *\n * @name lineEach\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @example\n * var multiLine = turf.multiLineString([\n *   [[26, 37], [35, 45]],\n *   [[36, 53], [38, 50], [41, 55]]\n * ]);\n *\n * turf.lineEach(multiLine, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n * });\n */\nfunction lineEach(geojson, callback) {\n    // validation\n    if (!geojson) throw new Error('geojson is required');\n\n    flattenEach(geojson, function (feature, featureIndex, multiFeatureIndex) {\n        if (feature.geometry === null) return;\n        var type = feature.geometry.type;\n        var coords = feature.geometry.coordinates;\n        switch (type) {\n        case 'LineString':\n            if (callback(feature, featureIndex, multiFeatureIndex, 0, 0) === false) return false;\n            break;\n        case 'Polygon':\n            for (var geometryIndex = 0; geometryIndex < coords.length; geometryIndex++) {\n                if (callback(helpers.lineString(coords[geometryIndex], feature.properties), featureIndex, multiFeatureIndex, geometryIndex) === false) return false;\n            }\n            break;\n        }\n    });\n}\n\n/**\n * Callback for lineReduce\n *\n * The first time the callback function is called, the values provided as arguments depend\n * on whether the reduce method has an initialValue argument.\n *\n * If an initialValue is provided to the reduce method:\n *  - The previousValue argument is initialValue.\n *  - The currentValue argument is the value of the first element present in the array.\n *\n * If an initialValue is not provided:\n *  - The previousValue argument is the value of the first element present in the array.\n *  - The currentValue argument is the value of the second element present in the array.\n *\n * @callback lineReduceCallback\n * @param {*} previousValue The accumulated value previously returned in the last invocation\n * of the callback, or initialValue, if supplied.\n * @param {Feature<LineString>} currentLine The current LineString|LinearRing being processed.\n * @param {number} featureIndex The current index of the Feature being processed\n * @param {number} multiFeatureIndex The current index of the Multi-Feature being processed\n * @param {number} geometryIndex The current index of the Geometry being processed\n */\n\n/**\n * Reduce features in any GeoJSON object, similar to Array.reduce().\n *\n * @name lineReduce\n * @param {Geometry|Feature<LineString|Polygon|MultiLineString|MultiPolygon>} geojson object\n * @param {Function} callback a method that takes (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex)\n * @param {*} [initialValue] Value to use as the first argument to the first call of the callback.\n * @returns {*} The value that results from the reduction.\n * @example\n * var multiPoly = turf.multiPolygon([\n *   turf.polygon([[[12,48],[2,41],[24,38],[12,48]], [[9,44],[13,41],[13,45],[9,44]]]),\n *   turf.polygon([[[5, 5], [0, 0], [2, 2], [4, 4], [5, 5]]])\n * ]);\n *\n * turf.lineReduce(multiPoly, function (previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n *   //=previousValue\n *   //=currentLine\n *   //=featureIndex\n *   //=multiFeatureIndex\n *   //=geometryIndex\n *   return currentLine\n * });\n */\nfunction lineReduce(geojson, callback, initialValue) {\n    var previousValue = initialValue;\n    lineEach(geojson, function (currentLine, featureIndex, multiFeatureIndex, geometryIndex) {\n        if (featureIndex === 0 && initialValue === undefined) previousValue = currentLine;\n        else previousValue = callback(previousValue, currentLine, featureIndex, multiFeatureIndex, geometryIndex);\n    });\n    return previousValue;\n}\n\n/**\n * Finds a particular 2-vertex LineString Segment from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n * Point & MultiPoint will always return null.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.segmentIndex=0] Segment Index\n * @param {Object} [options.properties={}] Translate Properties to output LineString\n * @param {BBox} [options.bbox={}] Translate BBox to output LineString\n * @param {number|string} [options.id={}] Translate Id to output LineString\n * @returns {Feature<LineString>} 2-vertex GeoJSON Feature LineString\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findSegment(multiLine);\n * // => Feature<LineString<[[10, 10], [50, 30]]>>\n *\n * // First Segment of 2nd Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: 1});\n * // => Feature<LineString<[[-10, -10], [-50, -30]]>>\n *\n * // Last Segment of Last Multi Feature\n * turf.findSegment(multiLine, {multiFeatureIndex: -1, segmentIndex: -1});\n * // => Feature<LineString<[[-50, -30], [-30, -40]]>>\n */\nfunction findSegment(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var segmentIndex = options.segmentIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find SegmentIndex\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n        if (segmentIndex < 0) segmentIndex = coords.length + segmentIndex - 1;\n        return helpers.lineString([coords[segmentIndex], coords[segmentIndex + 1]], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[geometryIndex].length + segmentIndex - 1;\n        return helpers.lineString([coords[geometryIndex][segmentIndex], coords[geometryIndex][segmentIndex + 1]], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex].length + segmentIndex - 1;\n        return helpers.lineString([coords[multiFeatureIndex][segmentIndex], coords[multiFeatureIndex][segmentIndex + 1]], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (segmentIndex < 0) segmentIndex = coords[multiFeatureIndex][geometryIndex].length - segmentIndex - 1;\n        return helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex], coords[multiFeatureIndex][geometryIndex][segmentIndex + 1]], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\n/**\n * Finds a particular Point from a GeoJSON using `@turf/meta` indexes.\n *\n * Negative indexes are permitted.\n *\n * @param {FeatureCollection|Feature|Geometry} geojson Any GeoJSON Feature or Geometry\n * @param {Object} [options={}] Optional parameters\n * @param {number} [options.featureIndex=0] Feature Index\n * @param {number} [options.multiFeatureIndex=0] Multi-Feature Index\n * @param {number} [options.geometryIndex=0] Geometry Index\n * @param {number} [options.coordIndex=0] Coord Index\n * @param {Object} [options.properties={}] Translate Properties to output Point\n * @param {BBox} [options.bbox={}] Translate BBox to output Point\n * @param {number|string} [options.id={}] Translate Id to output Point\n * @returns {Feature<Point>} 2-vertex GeoJSON Feature Point\n * @example\n * var multiLine = turf.multiLineString([\n *     [[10, 10], [50, 30], [30, 40]],\n *     [[-10, -10], [-50, -30], [-30, -40]]\n * ]);\n *\n * // First Segment (defaults are 0)\n * turf.findPoint(multiLine);\n * // => Feature<Point<[10, 10]>>\n *\n * // First Segment of the 2nd Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: 1});\n * // => Feature<Point<[-10, -10]>>\n *\n * // Last Segment of last Multi-Feature\n * turf.findPoint(multiLine, {multiFeatureIndex: -1, coordIndex: -1});\n * // => Feature<Point<[-30, -40]>>\n */\nfunction findPoint(geojson, options) {\n    // Optional Parameters\n    options = options || {};\n    if (!helpers.isObject(options)) throw new Error('options is invalid');\n    var featureIndex = options.featureIndex || 0;\n    var multiFeatureIndex = options.multiFeatureIndex || 0;\n    var geometryIndex = options.geometryIndex || 0;\n    var coordIndex = options.coordIndex || 0;\n\n    // Find FeatureIndex\n    var properties = options.properties;\n    var geometry;\n\n    switch (geojson.type) {\n    case 'FeatureCollection':\n        if (featureIndex < 0) featureIndex = geojson.features.length + featureIndex;\n        properties = properties || geojson.features[featureIndex].properties;\n        geometry = geojson.features[featureIndex].geometry;\n        break;\n    case 'Feature':\n        properties = properties || geojson.properties;\n        geometry = geojson.geometry;\n        break;\n    case 'Point':\n    case 'MultiPoint':\n        return null;\n    case 'LineString':\n    case 'Polygon':\n    case 'MultiLineString':\n    case 'MultiPolygon':\n        geometry = geojson;\n        break;\n    default:\n        throw new Error('geojson is invalid');\n    }\n\n    // Find Coord Index\n    if (geometry === null) return null;\n    var coords = geometry.coordinates;\n    switch (geometry.type) {\n    case 'Point':\n        return helpers.point(coords, properties, options);\n    case 'MultiPoint':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        return helpers.point(coords[multiFeatureIndex], properties, options);\n    case 'LineString':\n        if (coordIndex < 0) coordIndex = coords.length + coordIndex;\n        return helpers.point(coords[coordIndex], properties, options);\n    case 'Polygon':\n        if (geometryIndex < 0) geometryIndex = coords.length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[geometryIndex].length + coordIndex;\n        return helpers.point(coords[geometryIndex][coordIndex], properties, options);\n    case 'MultiLineString':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex].length + coordIndex;\n        return helpers.point(coords[multiFeatureIndex][coordIndex], properties, options);\n    case 'MultiPolygon':\n        if (multiFeatureIndex < 0) multiFeatureIndex = coords.length + multiFeatureIndex;\n        if (geometryIndex < 0) geometryIndex = coords[multiFeatureIndex].length + geometryIndex;\n        if (coordIndex < 0) coordIndex = coords[multiFeatureIndex][geometryIndex].length - coordIndex;\n        return helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex], properties, options);\n    }\n    throw new Error('geojson is invalid');\n}\n\nexports.coordEach = coordEach;\nexports.coordReduce = coordReduce;\nexports.propEach = propEach;\nexports.propReduce = propReduce;\nexports.featureEach = featureEach;\nexports.featureReduce = featureReduce;\nexports.coordAll = coordAll;\nexports.geomEach = geomEach;\nexports.geomReduce = geomReduce;\nexports.flattenEach = flattenEach;\nexports.flattenReduce = flattenReduce;\nexports.segmentEach = segmentEach;\nexports.segmentReduce = segmentReduce;\nexports.lineEach = lineEach;\nexports.lineReduce = lineReduce;\nexports.findSegment = findSegment;\nexports.findPoint = findPoint;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@turf/area/node_modules/@turf/meta/index.js\n// module id = 6363\n// module chunks = 1"],"sourceRoot":""}